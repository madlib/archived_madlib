
/* -----------------------------------------------------------------------------
 * Test Cross Validation (for ridge regression)
 * -------------------------------------------------------------------------- */

create table cvtest1 (val double precision[], dep double precision);
insert into cvtest1 values
    ('{0.193267057302356,0.192981948405706}'::DOUBLE PRECISION[],2.56594066860174),
    ('{-0.17171535003917,-0.164557270376081}'::DOUBLE PRECISION[],3.65020406764003),
    ('{-1.23569981525363,-1.22578645484853}'::DOUBLE PRECISION[],2.59929318141665),
    ('{-2.46197158338346,-2.44436198485027}'::DOUBLE PRECISION[],-0.625162363208786),
    ('{0.334879319873701,0.344741822473557}'::DOUBLE PRECISION[],2.94839526039547),
    ('{-0.609159190859573,-0.608357708058468}'::DOUBLE PRECISION[],2.07596128411758),
    ('{1.83290320785012,1.83501284601366}'::DOUBLE PRECISION[],5.21700367751786),
    ('{0.365909052214383,0.36543882759006}'::DOUBLE PRECISION[],2.181242075964),
    ('{-0.0249469576857958,-0.0199956474838976}'::DOUBLE PRECISION[],2.74143568302009),
    ('{0.630104715348257,0.621790126546521}'::DOUBLE PRECISION[],3.27865742784096),
    ('{-2.08241893717537,-2.08085543540898}'::DOUBLE PRECISION[],-1.87121602942374),
    ('{-1.41950236743652,-1.41565422617529}'::DOUBLE PRECISION[],0.67734855486387),
    ('{0.232645377902583,0.238418666368444}'::DOUBLE PRECISION[],4.0445744604775),
    ('{-0.0109825661445307,-0.0117080610558929}'::DOUBLE PRECISION[],2.42479054994826),
    ('{1.63453194674629,1.64408321326902}'::DOUBLE PRECISION[],5.5432392349232),
    ('{-1.0297166716178,-1.03137840519461}'::DOUBLE PRECISION[],1.420105931259),
    ('{0.523061224330469,0.528820930045801}'::DOUBLE PRECISION[],3.47852743499492),
    ('{0.0153751357289507,0.00883628599658553}'::DOUBLE PRECISION[],2.4072179664006),
    ('{0.167003244871624,0.150024935573413}'::DOUBLE PRECISION[],1.16430748252127),
    ('{0.616660803279844,0.607630803977977}'::DOUBLE PRECISION[],6.07117554406169),
    ('{0.0627534692521527,0.0576608426242054}'::DOUBLE PRECISION[],3.49021011861273),
    ('{0.764936912683798,0.773073448400899}'::DOUBLE PRECISION[],5.92036230890187),
    ('{-0.152777019331115,-0.138306347888119}'::DOUBLE PRECISION[],3.68781064860887),
    ('{-0.0443825110915041,-0.0523163541573306}'::DOUBLE PRECISION[],2.75381289521263),
    ('{-0.772836254153071,-0.76350064254251}'::DOUBLE PRECISION[],1.48031776089616),
    ('{1.36061632566895,1.35219922691695}'::DOUBLE PRECISION[],5.94235084894906),
    ('{-1.5400884015334,-1.54795035057537}'::DOUBLE PRECISION[],-1.36464188869536),
    ('{1.74340031807996,1.74441411062626}'::DOUBLE PRECISION[],6.24241855926976),
    ('{-0.219024709697608,-0.217183901919671}'::DOUBLE PRECISION[],2.86064775267461),
    ('{0.944022335994741,0.947682485579478}'::DOUBLE PRECISION[],6.18749326094099),
    ('{0.177147009070609,0.175844116735576}'::DOUBLE PRECISION[],4.75425456026773),
    ('{0.831734883139507,0.831284775658187}'::DOUBLE PRECISION[],4.58570546917648),
    ('{-0.378409870456226,-0.372485078948468}'::DOUBLE PRECISION[],0.932753701799814),
    ('{-0.085168119944625,-0.0796509984347373}'::DOUBLE PRECISION[],4.61448425225607),
    ('{-0.733272238161691,-0.742592685537029}'::DOUBLE PRECISION[],1.2210267287791),
    ('{0.0833060619469952,0.0846403994929123}'::DOUBLE PRECISION[],1.91917829739883),
    ('{0.865116654960407,0.861557553757444}'::DOUBLE PRECISION[],6.87413337107766),
    ('{1.81914068241696,1.81945535529217}'::DOUBLE PRECISION[],7.34868882031843),
    ('{-0.738740910343235,-0.736790533248806}'::DOUBLE PRECISION[],2.71480759489156),
    ('{-0.134910075174173,-0.135564161620682}'::DOUBLE PRECISION[],4.15351076480897),
    ('{-2.09457538643563,-2.08568025493611}'::DOUBLE PRECISION[],-1.24658289340345),
    ('{-0.612416974027059,-0.624098111086817}'::DOUBLE PRECISION[],1.17505948527633),
    ('{0.213596921544821,0.202783062031042}'::DOUBLE PRECISION[],1.23352082610806),
    ('{-1.22098417157359,-1.22120979036526}'::DOUBLE PRECISION[],0.660947865007035),
    ('{-1.86157750855204,-1.87266046301513}'::DOUBLE PRECISION[],-0.396160055782494),
    ('{-0.904363543668918,-0.901849579016782}'::DOUBLE PRECISION[],0.581926319333763),
    ('{0.0660467156858746,0.0749062271790943}'::DOUBLE PRECISION[],3.44424975020505),
    ('{-0.491238759303344,-0.503025497328641}'::DOUBLE PRECISION[],2.45961774510918),
    ('{-0.323831160810529,-0.310041684361776}'::DOUBLE PRECISION[],-0.163803866434659),
    ('{0.55329272119565,0.552775712287726}'::DOUBLE PRECISION[],3.87704750098335);
    
create function check_cv()
returns void as $$
--declare
  --  minv  double precision;
    --maxv  double precision;
begin
    execute 'drop table if exists valid_rst_tbl_new';
    perform cross_validation_general(
        'madlib.ridge_newton_train',
        '{%data%, val, dep, %model%, lambda, True}'::varchar[],
        '{varchar, varchar, varchar, varchar, double precision, boolean}'::varchar[],
        --
        'lambda',
        '{0.01, 0.02, 0.04, 0.08, 0.1, 0.2, 0.4, 0.8, 1}'::varchar[],
        --
        'madlib.ridge_linear_newton_predict',
        '{%model%, %data%, val, %id%, %prediction%}'::varchar[],
        '{varchar, varchar, varchar, varchar, varchar}'::varchar[],
        --
        'madlib.mse_error',
        '{%prediction%, %data%, %id%, dep, %error%}'::varchar[],
        '{varchar, varchar, varchar, varchar, varchar}'::varchar[],
        --
        'cvtest1',
        NULL::varchar,
        False,
        --
        'valid_rst_tbl_new',
        10,
        10,
        '{val, dep}'::varchar[]
    );

    --execute 'select min(mean_squared_error_avg) from valid_rst_tbl_new' into minv;
    --execute 'select max(mean_squared_error_avg) from valid_rst_tbl_new' into maxv;

    --raise notice '************ min is %', minv;
    --raise notice '************ max is %', maxv;

    perform assert(relative_error(mean_squared_error_avg, 1.45) < 0.3,
                    'CV result: error mismatch!'
            ) from valid_rst_tbl_new;
end;
$$ language plpgsql volatile;

select check_cv();

create function check_cv_ridge()
returns void as $$
begin
    execute 'drop table if exists validation_result';
    perform cross_validation(
    'ridge',
    '{normalization = True, col_ind_var = val, col_dep_var = dep, tbl_source = cvtest1}',
    'lambda',
    '{0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2}'::double precision[],
    NULL::varchar, -- no unique ID associated with rows
    False,  -- if there is a unique ID, whether it is random
    'validation_result',
    10    -- cross validation fold
);

    perform assert(relative_error(mean_squared_error_avg, 1.8) < 0.6,
                'CV result: error mismatch!'
    ) from validation_result;
end;
$$ language plpgsql volatile;

select check_cv_ridge();


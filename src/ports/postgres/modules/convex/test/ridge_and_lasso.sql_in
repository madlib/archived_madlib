/* -----------------------------------------------------------------------------
 * Test Linear Regression (Ridge & LASSO)
 * -------------------------------------------------------------------------- */

/*
 * The following example is taken from:
 * http://www.stat.columbia.edu/~martin/W2110/SAS_7.pdf
 */
CREATE TABLE houses (
    id SERIAL NOT NULL,
    tax INTEGER,
    bedroom REAL,
    bath REAL,
    price INTEGER,
    size INTEGER,
    lot INTEGER,
    CONSTRAINT pk_houses PRIMARY KEY (id)
);

INSERT INTO houses(tax, bedroom, bath, price, size, lot) VALUES
( 590, 2, 1,    50000,  770, 22100),
(1050, 3, 2,    85000, 1410, 12000),
(  20, 3, 1,    22500, 1060, 3500 ),
( 870, 2, 2,    90000, 1300, 17500),
(1320, 3, 2,   133000, 1500, 30000),
(1350, 2, 1,    90500,  820, 25700),
(2790, 3, 2.5, 260000, 2130, 25000),
( 680, 2, 1,   142500, 1170, 22000),
(1840, 3, 2,   160000, 1500, 19000),
(3680, 4, 2,   240000, 2790, 20000),
(1660, 3, 1,    87000, 1030, 17500),
(1620, 3, 2,   118600, 1250, 20000),
(3100, 3, 2,   140000, 1760, 38000),
(2070, 2, 3,   148000, 1550, 14000),
( 650, 3, 1.5,  65000, 1450, 12000);

CREATE TABLE houses_array AS
SELECT array[1, bedroom, bath, size] AS features, price
FROM houses;

-- pre-conditioning
CREATE TABLE houses_stddev AS
SELECT stddev(bedroom) AS stddev_bedroom, stddev(bath) AS stddev_bath,
    stddev(size) AS stddev_size, stddev(price) AS stddev_price
FROM houses;

CREATE TABLE houses_avg AS
SELECT avg(bedroom) AS avg_bedroom, avg(bath) AS avg_bath,
    avg(size) AS avg_size, avg(price) AS avg_price
FROM houses;

CREATE TABLE houses_array_normalized AS
SELECT 
    array[1, 
        (bedroom - avg_bedroom) / stddev_bedroom,
        (bath - avg_bath) / stddev_bath,
        (size - avg_size) / stddev_size] AS features,
    (price - avg_price) / stddev_price AS price
FROM houses, houses_avg, houses_stddev;

/* ---------------------------------------------------------------------------
 * Ridge Regression
 * -------------------------------------------------------------------------*/
CREATE FUNCTION check_ridge_newton()
RETURNS VOID AS $$
DECLARE
    model_id_1  INTEGER;
    model_id_2  INTEGER;
BEGIN
    -- 1. same result as linear regression with lambda = 0
    PERFORM ridge_newton_train(
        'houses_array',
        'features',
        'price',
        'test_ridge_model',
        0,
        False
        );

    PERFORM assert(
        relative_error(coefficients, ARRAY[27923.43, -35524.78, 2269.34, 130.79]) < 1e-4,
        'Ridge with lambda = 0 (houses): Wrong results'
    ) FROM test_ridge_model;

    -- 2. with lambda > 0, norm has decreased
    PERFORM ridge_newton_train(
        'houses_array',
        'features',
        'price',
        'test_ridge_model1',
        0.1,
        False
        );

    PERFORM assert(
        norm1 > norm2,
        'Ridge with lambda > 0 should have a smaller 2-norm: Wrong results'
    ) FROM (
        SELECT array_dot(coefficients, coefficients) as norm1
        FROM test_ridge_model
    ) AS s,
    (
        SELECT array_dot(coefficients, coefficients) as norm2
        FROM test_ridge_model1
    ) AS t;
END;
$$ LANGUAGE plpgsql VOLATILE;

SELECT check_ridge_newton();

/* ---------------------------------------------------------------------------
 * LASSO
 * -------------------------------------------------------------------------*/
CREATE FUNCTION check_lasso_igd()
RETURNS VOID AS $$
DECLARE
    norm1   double precision;
    norm2   double precision;
BEGIN
    -- 1. same result as linear regression with lambda = 0
    PERFORM lasso_igd_train(
        'houses_array_normalized',
        'features',
        'price',
        'test_lasso_model',
        0,
        False,
        0.01,
        5000,
        1e-10
        );

    PERFORM assert(
        relative_error(coefficients[2:4], ARRAY[-0.3251, 0.02179, 1.036]) < 5e-3,
        'LASSO with lambda = 0 (houses): Wrong results'
    ) FROM test_lasso_model;

    PERFORM assert(
        log_likelihood < 3,
        'LASSO with lambda = 0 (houses): Wrong results'
    ) FROM test_lasso_model;

    EXECUTE 'SELECT (@ coefficients[2]) + (@ coefficients[3]) + (@ coefficients[4])
            FROM test_lasso_model' INTO norm1;

    -- 2. with lambda > 0, l1-norm has decreased
    PERFORM lasso_igd_train(
        'houses_array_normalized',
        'features',
        'price',
        'test_lasso_model1',
        0.06,
        False,
        0.003,
        1000,
        1e-10
        );

    EXECUTE 'SELECT (@ coefficients[2]) + (@ coefficients[3]) + (@ coefficients[4])
            FROM test_lasso_model1' INTO norm2;

    raise notice 'norm1 is %', norm1;
    raise notice 'norm2 is %', norm2;
        
    PERFORM assert(
        norm1 > norm2,
        'LASSO with lambda > 0 should have a smaller 1-norm: Wrong results'
    );
END;
$$ LANGUAGE plpgsql VOLATILE;

SELECT check_lasso_igd();


/* ----------------------------------------------------------------------- *//**
 *
 * @file crf_train_fgen.sql_in 
 *
 * @brief SQL function for training data POS/NER feature extraction 
 * @date May 2012
 * @sa For an introduction to POS/NER feature extraction, see the module description
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4') 

/**
@addtogroup grp_crf

@about
# Prepare an input dictionary table, e.g.,:
- CREATE TABLE dictionary (token text,token_id integer,label text,count integer,total integer)
\verbatim
sql> select * from dictionary;
token       | label  | count | total
------------+--------+--------------
   freefall |   11   |   1   |  1
     policy |   11   |   2   |  2
   measures |   12   |   1   |  1
 commitment |   11   |   1   |  1
        new |    6   |   1   |  1
     speech |   11   |   1   |  1
         's |   16   |   2   |  2
     reckon |   30   |   1   |  1
 underlying |   28   |   1   |  1
 ...
\endverbatim
*/

/**
 * @brief This function extracts training data POS/NER features.
 *
 * This feature extraction function will produce dictionary table and feature table
 * (start_pos,doc_id,feature)
 *
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.crf_train_fgen(traindata text, regextbl text) 
RETURNS void AS $$     
    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.crf_feature(doc_id integer,f_size FLOAT8,feature FLOAT8[]);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.tmp1_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.tmp1_feature(start_pos integer,doc_id integer, f_name text, feature integer[]);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.tmp2_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.tmp2_feature(start_pos integer,doc_id integer, f_name text, feature integer[]);")

    # dictionary table
    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_dictionary;" + \
                 "CREATE TABLE MADLIB_SCHEMA.crf_dictionary(seg_text text,total integer);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.tmp_crf_feature_dic;" + \
                 "CREATE TABLE MADLIB_SCHEMA.tmp_crf_feature_dic(f_name text, feature integer[]);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_feature_dic;" + \
                 "CREATE TABLE MADLIB_SCHEMA.crf_feature_dic(f_index integer, f_name text, feature integer[]);")
 
    # insert into dictionary table
    plpy.execute("""INSERT INTO crf_dictionary(seg_text, total)
                    SELECT seg_text, count(*)
                    FROM   """ + traindata + """
                    GROUP BY seg_text;""")
 
    # create a temporary table to store all the features
        
    # extract all the edge features
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_name, feature) 
                    SELECT doc2.start_pos, doc2.doc_id, 'E.', ARRAY[1, doc1.label, doc2.label]
                    FROM  """ + traindata + """ doc1, """ + traindata + """ doc2
                    WHERE  doc1.doc_id = doc2.doc_id AND doc1.start_pos+1 = doc2.start_pos;""")
         
    #extract all the regex features
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_name, feature) 
                    SELECT start_pos, doc_id, 'R_' || name, ARRAY[2, -1, label]
                    FROM   """ + regextbl + """, """ + traindata + """
                    WHERE  seg_text ~ pattern;""")
           
    #extract all the start feature
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_name, feature) 
                    SELECT start_pos, doc_id, 'S.', ARRAY[2, -1, label]
                    FROM  """ + traindata + """
                    WHERE  start_pos = 0;""")
        
    #extract all the end featue
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_name, feature) 
                    SELECT start_pos, doc_id, 'End.', ARRAY[2, -1, label]
                    FROM  """ + traindata + """
                    WHERE  start_pos = max_pos;""")

    #word feature
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_name, feature) 
                    SELECT start_pos, doc_id, 'W_' || seg_text, ARRAY[2, -1, label]
                    FROM  """ + traindata + """;""")
        
    #unknown feature
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_name, feature) 
                    SELECT start_pos, doc_id, 'U', ARRAY[2, -1, label]
                    FROM  """ + traindata + """ seg, crf_dictionary dic
                    WHERE  seg.seg_text = dic.seg_text AND dic.total <= 1;""")
 
    plpy.execute("""INSERT INTO tmp_crf_feature_dic(f_name, feature) 
                    SELECT DISTINCT f_name, feature
                    FROM   tmp1_feature;""")

    plpy.execute("""DROP SEQUENCE IF EXISTS seq;
                    CREATE TEMP SEQUENCE seq START 1 INCREMENT 1;""")

    #get all distcint features
    plpy.execute("""INSERT INTO crf_feature_dic(f_index, f_name, feature) 
                    SELECT nextval('seq')-1, f_name, feature
                    FROM   tmp_crf_feature_dic;""")
    
    rv = plpy.execute("""SELECT COUNT(*) AS total_feature FROM crf_feature_dic;""")

    plpy.execute("""INSERT INTO tmp2_feature(start_pos,doc_id,feature)
                    SELECT start_pos, doc_id, 
                           array_cat(crf_feature_dic.feature, 
                                     ARRAY[f_index,start_pos, 
                                           CASE WHEN tmp1_feature.feature = crf_feature_dic.feature THEN 1
                                                ELSE 0
                                           END
                                          ]
                                    )
                    FROM   tmp1_feature, crf_feature_dic
                    WHERE  tmp1_feature.f_name = crf_feature_dic.f_name;""")

    plpy.execute("""INSERT INTO crf_feature(doc_id, f_size, feature)
                    SELECT doc_id,""" + str(rv[0]['total_feature']) + """, 
                           MADLIB_SCHEMA.array_union(feature::integer[] order by start_pos)
                    FROM   tmp2_feature
                    GROUP BY doc_id;""")

$$ LANGUAGE plpythonu STRICT;         

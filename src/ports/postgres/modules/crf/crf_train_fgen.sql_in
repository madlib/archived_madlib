/* ----------------------------------------------------------------------- *//**
 *
 * @file train_data_loader.sql_in
 *
 * @brief create all the necessary tables to store the training data, then use the linear chain conditional 
 *        random field to train the data
 * @param datapath the path to the crf training data
 * @date May 2012
 * @sa For an introduction to the text feature extraction, see the module
 *     description \ref grp_crf
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.crf_train_fgen(traindata text, regextbl text) 
RETURNS integer AS $$     
    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.crf_feature(doc_id integer,feature_ids integer[],feature_names text[],prev_labels integer[], labels integer[]);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.tmp1_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.tmp1_feature(start_pos integer,doc_id integer,f_type integer,prev_label integer,label integer);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.tmp2_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.tmp2_feature(start_pos integer,doc_id integer,f_type integer,f_index integer,prev_label integer, label integer);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.tmp3_feature;" + \
                 "CREATE TABLE MADLIB_SCHEMA.tmp3_feature(start_pos integer,doc_id integer,f_type integer,f_index integer,prev_label integer, label integer);")

    # dictionary table
    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_dictionary;" + \
                 "CREATE TABLE MADLIB_SCHEMA.crf_dictionary(seg_text text,total integer);")

    plpy.execute("DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_feature_dic;" + \
                 "CREATE TABLE MADLIB_SCHEMA.crf_feature_dic(f_index integer, f_type integer, prev_label integer, label integer);")
 
    # insert into dictionary table
    plpy.execute("""INSERT INTO crf_dictionary(seg_text, total)
                    SELECT DISTINCT on (seg_text) seg_text, count(*)
                    FROM   """ + traindata + """
                    GROUP BY seg_text;""")
 
    # create a temporary table to store all the features
        
    # extract all the edge features
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_type,prev_label,label) 
                    SELECT doc1.start_pos, doc1.doc_id, 1, doc1.label, doc2.label 
                    FROM  """ + traindata + """ doc1, """ + traindata + """ doc2
                    WHERE  doc1.doc_id = doc2.doc_id AND doc1.start_pos+1 = doc2.start_pos;""")
         
    #extract all the regex features
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_type,prev_label,label) 
                    SELECT start_pos, doc_id, 2, -1, label
                    FROM   """ + regextbl + """, """ + traindata + """
                    WHERE  seg_text ~ pattern;""")
           
    #extract all the start feature
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_type,prev_label,label) 
                    SELECT start_pos, doc_id, 2, -1, label
                    FROM  """ + traindata + """
                    WHERE  start_pos = 0;""")
        
    #extract all the end featue
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_type,prev_label,label) 
                    SELECT start_pos, doc_id, 2, -1, label
                    FROM  """ + traindata + """
                    WHERE  start_pos = max_pos;""")

    #word feature
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_type,prev_label,label) 
                    SELECT start_pos, doc_id, 2, -1, label
                    FROM  """ + traindata + """;""")
        
    #unknown feature
    plpy.execute("""INSERT INTO tmp1_feature(start_pos, doc_id, f_type,prev_label,label) 
                    SELECT start_pos,doc_id, 2, -1, label
                    FROM  """ + traindata + """ seg, crf_dictionary dic
                    WHERE  seg.seg_text = dic.seg_text AND dic.total <= 1;""")
 
    plpy.execute("""DROP SEQUENCE IF EXISTS seq;
                    CREATE TEMP SEQUENCE seq START 1 INCREMENT 1;""")

    #get all distcint features
    plpy.execute("""INSERT INTO crf_feature_dic(f_index,f_type,prev_label,label) 
                    SELECT DISTINCT ON (f_type,prev_label,label) nextval('seq'), f_type, prev_label, label
                    FROM   tmp1_feature;""")
       
    plpy.execute("""INSERT INTO tmp2_feature(start_pos,doc_id,f_type,f_index,prev_label,label)
                    SELECT start_pos, doc_id, tmp1_feature.f_type, f_index, tmp1_feature.prev_label, tmp1_feature.label
                    FROM   tmp1_feature, crf_feature_dic
                    WHERE  tmp1_feature.f_type = crf_feature_dic.f_type AND
                           tmp1_feature.prev_label = crf_feature_dic.prev_label AND
	                   tmp1_feature.label = crf_feature_dic.label;""")  
        
    rv = plpy.execute("""SELECT COUNT(*) AS total_feature FROM tmp2_feature;""")
 
    plpy.execute("""INSERT INTO tmp3_feature(start_pos,doc_id,f_type,f_index, prev_label, label)
                    SELECT start_pos, doc_id, f_type, f_index, prev_label, label
                    FROM   tmp2_feature;""")

    plpy.execute("""INSERT INTO tmp3_feature(start_pos,doc_id,f_type,f_index, prev_label, label)
                    SELECT DISTINCT ON (start_pos, doc_id) start_pos, doc_id, -1, -1, -1, -1
                    FROM   tmp2_feature;""")

    plpy.execute("""INSERT INTO crf_feature(doc_id, feature_id, feature_type, prev_label, label)
                    SELECT doc_id, array_agg(f_index ORDER BY start_pos, f_index), 
                                   array_agg(f_type ORDER BY start_pos, f_index),
                                   array_agg(prev_label ORDER BY start_pos, f_index),
                                   array_agg(label ORDER BY start_pos, f_index)
                    FROM   tmp3_feature
                    GROUP BY doc_id;""")

    return rv[0]['total_feature']
$$ LANGUAGE plpythonu STRICT;         

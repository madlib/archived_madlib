/* ----------------------------------------------------------------------- *//**
 *
 * @file train_data_loader.sql_in
 *
 * @brief create all the necessary tables to store the training data, then use the linear chain conditional 
 *        random field to train the data
 * @param datapath the path to the crf training data
 * @date May 2012
 * @sa For an introduction to the text feature extraction, see the module
 *     description \ref grp_crf
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.load_crf_traindata(datapath text) RETURNS void AS
$$      
	# import label data to the database
	query = "DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_label CASCADE;" + \
	        "CREATE TABLE MADLIB_SCHEMA.crf_label(id integer,label text);" + \
	        "COPY MADLIB_SCHEMA.crf_label(id,label) FROM '" + datapath + "/crf_label.tab'";
	plpy.execute(query);

        # import regex table to the database
	query = "DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_regex CASCADE;" + \
                "CREATE TABLE MADLIB_SCHEMA.crf_regex (pattern text,name text);" + \
	        "COPY MADLIB_SCHEMA.crf_regex(pattern,name) FROM '" + datapath + "/crf_regex.tab'";
	plpy.execute(query);
    
        # import training data to the database
        query = "DROP TABLE IF EXISTS MADLIB_SCHEMA.crf_traindata CASCADE;" + \
                "CREATE TABLE MADLIB_SCHEMA.crf_traindata(start_pos integer,doc_id integer,seg_text text,label integer,max_pos integer);" + \
	        "COPY MADLIB_SCHEMA.crf_traindata(start_pos,doc_id,seg_text,label,max_pos) FROM '" + datapath + "/crf_traindata.tab'";
        plpy.execute(query);

$$ LANGUAGE plpythonu STRICT;

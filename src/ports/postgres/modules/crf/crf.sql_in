/* ----------------------------------------------------------------------- *//** 
 *
 * @file crf.sql_in
 *
 * @brief SQL functions for conditional random field
 * @date July 2012
 *
 * @sa For a brief introduction to conditional random field, see the
 *     module description \ref grp_crf.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_crf

@about
Conditional random fields(CRFs) is a type of discriminative undirected probabilistic graphical model.
A linear-chain CRF is a distribution
\f[
    p(\boldsymbol Y | \boldsymbol X) =
        \frac{\exp{\sum_{m=1}^M \lambda_m f_m(y_n,y_{n-1},x_n)}}{Z(X)}
    \,.
\f]

Where Z(X) is an instance specific normalizer
\f[
Z(X) = \sum_{y} \exp{\sum_{m=1}^M \lambda_m f_m(y_n,y_{n-1},x_n)}
\f]

The Feature Extraction module provides functionality for basic text-analysis
tasks such as part-of-speech (POS) tagging and named-entity resolution.
In addition to feature extraction, it also has a Viterbi implementation
to get the best label sequence and the conditional probability
\f$ \Pr( \text{best label sequence} \mid \text{Sentence}) \f$.

At present, six feature types are implemented.
- Edge Feature: transition feature that encodes the transition feature
weight from current label to next label.
- Start Feature: fired when the current token is the first token in a sentence.
- End Feature: fired when the current token is the last token in a sentence.
- Word Feature: fired when the current token is observed in the trained
dictionary.
- Unknown Feature: fired when the current token is not observed in the trained
dictionary for at least certain times.
- Regex Feature: fired when the current token can be matched by the regular
expression.

You can add your own feature type according to the training model

@input

The training data is the following form:\n
<pre>{TABLE|VIEW} <em>sourceName</em> (
    ...
    <em>featureColumn</em> FLOAT8[],
    <em>featureSize</em> FLOAT8,
    <em>tagSize</em> FLOAT8,
    ...
)</pre>

@usage
- Get vector of coefficients \f$ \boldsymbol c \f$ and all diagnostic
  statistics:\n
  <pre>SELECT * FROM \ref lincrf(
    '<em>sourceName</em>', '<em>featureColumn</em>', '<em>featureSize</em>', '<em>tagSize</em>'
    [, <em>numberOfIterations</em> [, <em>precision</em> ] ] ]
);</pre>
  Output:
  <pre>coef | log_likelihood | std_err | z_stats | p_values | odds_ratios | condition_no | num_iterations
-----+----------------+---------+---------+----------+-------------+--------------+---------------
                                               ...
@examp
@literature
[1] http://en.wikipedia.org/wiki/Conditional_random_field

@sa File crf.sql_in (documenting the SQL functions)

*/

DROP TYPE IF EXISTS MADLIB_SCHEMA.lincrf_result;
CREATE TYPE MADLIB_SCHEMA.lincrf_result AS (
    coef DOUBLE PRECISION[],
    log_likelihood DOUBLE PRECISION,
    num_iterations INTEGER
);

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.lincrf_lbfgs_step_transition(
    DOUBLE PRECISION[],
    DOUBLE PRECISION[],
    DOUBLE PRECISION,
    DOUBLE PRECISION,
    DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.lincrf_lbfgs_step_merge_states(
    state1 DOUBLE PRECISION[],
    state2 DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.lincrf_lbfgs_step_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_lincrf_lbfgs_step_distance(
    /*+ state1 */ DOUBLE PRECISION[],
    /*+ state2 */ DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION AS
'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_lincrf_lbfgs_result(
    /*+ state */ DOUBLE PRECISION[])
RETURNS MADLIB_SCHEMA.lincrf_result AS
'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT;

/**
 * @internal
 * @brief Perform one iteration of the L-BFGS method for computing
 * conditional random field
 */
CREATE AGGREGATE MADLIB_SCHEMA.lincrf_lbfgs_step(
    /*+ feature columns */ DOUBLE PRECISION[],
    /*+ feature size */ DOUBLE PRECISION,
    /*+ tag size */ DOUBLE PRECISION,
    /*+ previous_state */ DOUBLE PRECISION[]) (
    
    STYPE=DOUBLE PRECISION[],
    SFUNC=MADLIB_SCHEMA.lincrf_lbfgs_step_transition,
    m4_ifdef(`GREENPLUM',`prefunc=MADLIB_SCHEMA.lincrf_lbfgs_step_merge_states,')
    FINALFUNC=MADLIB_SCHEMA.lincrf_lbfgs_step_final,
    INITCOND='{0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0}'
);

CREATE AGGREGATE MADLIB_SCHEMA.array_union(anyarray) (
    SFUNC = array_cat, 
    STYPE = anyarray
); 

-- We only need to document the last one (unfortunately, in Greenplum we have to
-- use function overloading instead of default arguments).
CREATE FUNCTION MADLIB_SCHEMA.compute_lincrf(
    "source" VARCHAR,
    "featureColumn" VARCHAR,
    "featureSize" VARCHAR,
    "tagSize" INTEGER,
    "maxNumIterations" INTEGER,
    "precision" DOUBLE PRECISION)
RETURNS INTEGER
AS $$PythonFunction(crf, crf, compute_lincrf)$$
LANGUAGE plpythonu VOLATILE;

/**
 * @brief Compute linear-chain crf coefficients and diagnostic statistics
 *
 * @param source Name of the source relation containing the training data
 * @param featureColumn Name of the feature column (of type DOUBLE PRECISION[])
 * @param featureSize Name of feature size column (of type DOUBLE PRECISION)
 * @param tagSize The number of tags in the tag set
 * @param maxNumIterations The maximum number of iterations
 * @param precision The difference between log-likelihood values in successive
 * iterations that should indicate convergence. Note that a non-positive
 * value here disables the convergence criterion, and execution will only
 * stop after \c maxNumIterations iterations.
 *
 * @return A composite value:
 * - <tt>coef FLOAT8[]</tt> - Array of coefficients, \f$ \boldsymbol c \f$
 * - <tt>log_likelihood FLOAT8</tt> - Log-likelihood \f$ l(\boldsymbol c) \f$
 * - <tt>std_err FLOAT8[]</tt> - Array of standard errors,
 * \f$ \mathit{se}(c_1), \dots, \mathit{se}(c_k) \f$
 * - <tt>z_stats FLOAT8[]</tt> - Array of Wald z-statistics, \f$ \boldsymbol z \f$
 * - <tt>p_values FLOAT8[]</tt> - Array of Wald p-values, \f$ \boldsymbol p \f$
 * - <tt>odds_ratios FLOAT8[]</tt>: Array of odds ratios,
 * \f$ \mathit{odds}(c_1), \dots, \mathit{odds}(c_k) \f$
 * - <tt>condition_no FLOAT8</tt> - The condition number of matrix
 * \f$ X^T A X \f$ during the iteration immediately <em>preceding</em>
 * convergence (i.e., \f$ A \f$ is computed using the coefficients of the
 * previous iteration)
 * - <tt>num_iterations INTEGER</tt> - The number of iterations before the
 * algorithm terminated
 *
 * @usage
 * - Get vector of coefficients \f$ \boldsymbol c \f$ and all diagnostic
 * statistics:\n
 * <pre>SELECT * FROM logregr('<em>sourceName</em>', '<em>dependentVariable</em>', '<em>independentVariables</em>');</pre>
 * - Get vector of coefficients \f$ \boldsymbol c \f$:\n
 * <pre>SELECT (logregr('<em>sourceName</em>', '<em>dependentVariable</em>', '<em>independentVariables</em>')).coef;</pre>
 * - Get a subset of the output columns, e.g., only the array of coefficients
 * \f$ \boldsymbol c \f$, the log-likelihood of determination
 * \f$ l(\boldsymbol c) \f$, and the array of p-values \f$ \boldsymbol p \f$:
 * <pre>SELECT coef, log_likelihood, p_values
 *FROM logregr('<em>sourceName</em>', '<em>dependentVariable</em>', '<em>independentVariables</em>');</pre>
 *
 * @note This function starts an iterative algorithm. It is not an aggregate
 * function. Source and column names have to be passed as strings (due to
 * limitations of the SQL syntax).
 *
 * @internal
 * @sa This function is a wrapper for logistic::compute_logregr(), which
 * sets the default values.
 */

CREATE FUNCTION MADLIB_SCHEMA.lincrf(
    "source" VARCHAR,
    "featureColumn" VARCHAR,
    "featureSize" VARCHAR,
    "tagSize" INTEGER,
    "maxNumIterations" INTEGER /*+ DEFAULT 20 */)
RETURNS MADLIB_SCHEMA.lincrf_result AS $$
DECLARE
    theIteration INTEGER;
    theResult MADLIB_SCHEMA.lincrf_result;
BEGIN
    theIteration := (
        SELECT MADLIB_SCHEMA.compute_lincrf($1, $2, $3, $4, $5)
    );
    -- Because of Greenplum bug MPP-10050, we have to use dynamic SQL (using
    -- EXECUTE) in the following
    -- Because of Greenplum bug MPP-6731, we have to hide the tuple-returning
    -- function in a subquery
    EXECUTE
        $sql$
        SELECT (result).*
        FROM (
              SELECT MADLIB_SCHEMA.internal_lincrf_lbfgs_result(_madlib_state) AS result
              FROM   _madlib_iterative_alg
              WHERE  _madlib_iteration = $sql$ || theIteration || $sql$
             ) subq
        $sql$
        INTO theResult;
    -- The number of iterations are not updated in the C++ code. We do it here.
    IF NOT (theResult IS NULL) THEN
        theResult.num_iterations = theIteration;
    END IF;
    RETURN theResult;
END;
$$ LANGUAGE plpgsql VOLATILE;


CREATE FUNCTION MADLIB_SCHEMA.lincrf(
    "source" VARCHAR,
    "featureColumnn" VARCHAR,
    "featureSize" VARCHAR,
    "tagSize" INTEGER)
RETURNS MADLIB_SCHEMA.lincrf_result AS
$$SELECT MADLIB_SCHEMA.lincrf($1, $2, $3, $4, 20);$$
LANGUAGE sql VOLATILE;

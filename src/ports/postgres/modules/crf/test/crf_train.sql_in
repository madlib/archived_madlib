---------------------------------------------------------------------------
-- Rules:
-- ------
-- 1) Any DB objects should be created w/o schema prefix,
--    since this file is executed in a separate schema context.
-- 2) There should be no DROP statements in this script, since
--    all objects created in the default schema will be cleaned-up outside.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Setup:
---------------------------------------------------------------------------

CREATE FUNCTION install_test() RETURNS TEXT AS $$
DECLARE
        result_count INT;
	result  TEXT;
BEGIN     
	-- Regex table
        CREATE TABLE crf_regex(pattern text,name text); 
        INSERT INTO crf_regex VALUES
        ('^[A-Z][a-z]+$','InitCapital%'), ('^[A-Z]+$','isAllCapital%'),
        ('^.*[0-9]+.*$','containsDigit%'),('^.+[.]$','endsWithDot%'),
        ('^.+[,]$','endsWithComma%'),     ('^.+er$','endsWithER%'),
        ('^.+est$','endsWithEst%'),       ('^.+ed$','endsWithED%'),
        ('^.+s$','endsWithS%'),           ('^.+ing$','endsWithIng%'),
        ('^.+ly$','endsWithly%'),         ('^.+-.+$','isDashSeparatedWords%'),
        ('^.*@.*$','isEmailId%');
        analyze crf_regex;

        CREATE TABLE crf_traindata(start_pos integer,doc_id integer,seg_text text,label integer,max_pos integer);
        INSERT INTO crf_traindata VALUES
        (0,1,'confidence',11,36),  (1,1,'in',5,36),         (2,1,'the',2,36),         (3,1,'pound',11,36),
        (4,1,'is',31,36),          (5,1,'widely',19,36),    (6,1,'expected',29,36),   (7,1,'to',24,36),
        (8,1,'take',26,36),        (9,1,'another',2,36),    (10,1,'sharp',6,36),      (11,1,'dive',11,36),
        (12,1,'if',5,36),          (13,1,'trade',11,36),    (14,1,'figures',12,36),   (15,1,'for',5,36),
        (16,1,'september',13,36),  (17,1,',',42,36),        (18,1,'due',6,36),        (19,1,'for',5,36),
        (20,1,'release',11,36),    (21,1,'tomorrow',11,36), (22,1,',',42,36),         (23,1,'fail',26,36),
        (24,1,'to',24,36),         (25,1,'show',26,36),     (26,1,'a',2,36),          (27,1,'substantial',6,36),
        (28,1,'improvement',11,36),(29,1,'from',5,36),      (30,1,'july',13,36),      (31,1,'and',0,36),
        (32,1,'august',13,36),     (33,1,'''s',16,36),      (34,1,'near-record',6,36),(35,1,'deficits',12,36),
        (36,1,'.',43,36),          (0,2,'chancellor',13,26),(1,2,'of',5,26),          (2,2,'the',2,26),
        (3,2,'exchequer',13,26),   (4,2,'nigel',13,26),     (5,2,'lawson',13,26),     (6,2,'''s',16,26),
        (7,2,'restated',29,26),    (8,2,'commitment',11,26),(9,2,'to',24,26),         (10,2,'a',2,26),
        (11,2,'firm',11,26),       (12,2,'monetary',6,26),  (13,2,'policy',11,26),    (14,2,'has',31,26),
        (15,2,'helped',29,26),     (16,2,'to',24,26),       (17,2,'prevent',26),,26), (18,2,'a',2,26),
        (19,2,'freefall',11,26),   (20,2,'in',5,26),        (21,2,'sterling',11,26),  (22,2,'over',5,26),
        (23,2,'the',2,26),         (24,2,'past',6,26),      (25,2,'week',11,26),      (26,2,'.',43,26),
        (0,3,'but',0,28),          (1,3,'analysts',12,28),  (2,3,'reckon',30,28),     (3,3,'underlying',28),,28),
        (4,3,'support',11,28),     (5,3,'for',5,28),        (6,3,'sterling',11,28),   (7,3,'has',31,28),
        (8,3,'been',29,28),        (9,3,'eroded',29,28),    (10,3,'by',5,28),         (11,3,'the',2,28),
        (12,3,'chancellor',11,28), (13,3,'''s',16,28),      (14,3,'failure',11,28),   (15,3,'to',24,28),
        (16,3,'announce',26,28),   (17,3,'any',2,28),       (18,3,'new',6,28),        (19,3,'policy',11,28),
        (20,3,'measures',12,28),   (21,3,'in',5,28),        (22,3,'his',18,28),       (23,3,'mansion',13,28),
        (24,3,'house',13,28),      (25,3,'speech',11,28),   (26,3,'last',6,28),       (27,3,'thursday',13,28),
        (28,3,'.',43,28);

        PERFORM MADLIB_SCHEMA.crf_train_fgen('crf_traindata', 'crf_regex');

        PERFORM MADLIB_SCHEMA.lincrf('crf_feature','feature','f_size',45, 1,0.0001);

        -- Expected viterbi labeling result
        CREATE TABLE expected_featuretbl(id integer,name text,prev_label integer,label integer,weight float);
        INSERT INTO expected_featuretbl VALUES
        (0,'0',0,0,0.0);

        SELECT 0 INTO result_count;

        SELECT INTO result CASE WHEN (result_count = 0) THEN 'PASS' ELSE 'FAIL' END;

	IF result = 'FAIL' THEN
	   RAISE EXCEPTION 'Failed install check %', result_count;
	END IF;

	RETURN result;

END
$$ language plpgsql;

---------------------------------------------------------------------------
-- Test: 
---------------------------------------------------------------------------
SELECT install_test();

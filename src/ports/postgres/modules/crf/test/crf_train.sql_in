---------------------------------------------------------------------------
-- Rules:
-- ------
-- 1) Any DB objects should be created w/o schema prefix,
--    since this file is executed in a separate schema context.
-- 2) There should be no DROP statements in this script, since
--    all objects created in the default schema will be cleaned-up outside.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Setup:
---------------------------------------------------------------------------

CREATE FUNCTION crf_train_install_test() RETURNS TEXT AS $$
DECLARE
        error FLOAT8;
	result  TEXT;
BEGIN     
	-- Regex table
        CREATE TABLE crf_regex_train(pattern text,name text); 
        INSERT INTO crf_regex_train VALUES
        ('^[A-Z][a-z]+$','InitCapital%'), ('^[A-Z]+$','isAllCapital%'),
        ('^.*[0-9]+.*$','containsDigit%'),('^.+[.]$','endsWithDot%'),
        ('^.+[,]$','endsWithComma%'),     ('^.+er$','endsWithER%'),
        ('^.+est$','endsWithEst%'),       ('^.+ed$','endsWithED%'),
        ('^.+s$','endsWithS%'),           ('^.+ing$','endsWithIng%'),
        ('^.+ly$','endsWithly%'),         ('^.+-.+$','isDashSeparatedWords%'),
        ('^.*@.*$','isEmailId%');
        analyze crf_regex_train;

        CREATE TABLE train_segmenttbl(start_pos integer,doc_id integer,seg_text text,label integer,max_pos integer);
        INSERT INTO train_segmenttbl VALUES
        (0,1,'confidence',11,36),  (1,1,'in',5,36),         (2,1,'the',2,36),         (3,1,'pound',11,36),
        (4,1,'is',31,36),          (5,1,'widely',19,36),    (6,1,'expected',29,36),   (7,1,'to',24,36),
        (8,1,'take',26,36),        (9,1,'another',2,36),    (10,1,'sharp',6,36),      (11,1,'dive',11,36),
        (12,1,'if',5,36),          (13,1,'trade',11,36),    (14,1,'figures',12,36),   (15,1,'for',5,36),
        (16,1,'september',13,36),  (17,1,',',42,36),        (18,1,'due',6,36),        (19,1,'for',5,36),
        (20,1,'release',11,36),    (21,1,'tomorrow',11,36), (22,1,',',42,36),         (23,1,'fail',26,36),
        (24,1,'to',24,36),         (25,1,'show',26,36),     (26,1,'a',2,36),          (27,1,'substantial',6,36),
        (28,1,'improvement',11,36),(29,1,'from',5,36),      (30,1,'july',13,36),      (31,1,'and',0,36),
        (32,1,'august',13,36),     (33,1,'''s',16,36),      (34,1,'near-record',6,36),(35,1,'deficits',12,36),
        (36,1,'.',43,36),          (0,2,'chancellor',13,26),(1,2,'of',5,26),          (2,2,'the',2,26),
        (3,2,'exchequer',13,26),   (4,2,'nigel',13,26),     (5,2,'lawson',13,26),     (6,2,'''s',16,26),
        (7,2,'restated',29,26),    (8,2,'commitment',11,26),(9,2,'to',24,26),         (10,2,'a',2,26),
        (11,2,'firm',11,26),       (12,2,'monetary',6,26),  (13,2,'policy',11,26),    (14,2,'has',31,26),
        (15,2,'helped',29,26),     (16,2,'to',24,26),       (17,2,'prevent',26,26),   (18,2,'a',2,26),
        (19,2,'freefall',11,26),   (20,2,'in',5,26),        (21,2,'sterling',11,26),  (22,2,'over',5,26),
        (23,2,'the',2,26),         (24,2,'past',6,26),      (25,2,'week',11,26),      (26,2,'.',43,26);

        PERFORM MADLIB_SCHEMA.crf_train_fgen('train_segmenttbl', 'crf_regex_train');

        CREATE TABLE crf_feature (id integer,name text,prev_label_id integer,label_id integer,weight float);

        PERFORM MADLIB_SCHEMA.lincrf('featuretbl','feature','f_size',45, 2);

        -- Expected feature table
        CREATE TABLE expected_crf_feature(id integer,name text,prev_label integer,label integer,weight float);
	INSERT INTO expected_crf_feature VALUES
	(0,'W_for',-1,5,0.439850446732293),(1,'R_endsWithIng%',-1,11,0.219925223366146),
	(2,'W_restated',-1,29,0.219925223366146),(3,'E.',13,42,0.218036976498861),
	(4,'E.',5,2,0.667884024293252),(5,'E.',24,2,0.218036976498861),
	(6,'W_to',-1,24,0.879700893464586),(7,'W_chancellor',-1,13,0.219925223366146),
	(8,'W_has',-1,31,0.219925223366146),(9,'R_endsWithER%',-1,2,0.204930321773),
	(10,'U',-1,6,1.12961592001703),(11,'W_,',-1,42,0.439850446732293),
	(12,'S.',-1,13,0.214926922835098),(13,'U',-1,31,0.229921824428244),
	(14,'U',-1,12,0.229921824428244),(15,'W_''s',-1,16,0.439850446732293),
	(16,'E.',11,43,0.218036976498861),(17,'E.',11,5,1.11773107208764),
	(18,'W_exchequer',-1,13,0.219925223366146),(19,'W_deficits',-1,12,0.219925223366146),
	(20,'R_endsWithly%',-1,19,0.214926922835098),(21,'W_freefall',-1,11,0.219925223366146),
	(22,'W_trade',-1,11,0.219925223366146),(23,'W_tomorrow',-1,11,0.219925223366146),
	(24,'E.',12,5,0.218036976498861),(25,'W_helped',-1,29,0.219925223366146),
	(26,'E.',13,16,0.442960500396057),(27,'W_from',-1,5,0.219925223366146),
	(28,'E.',29,11,0.218036976498861),(29,'W_show',-1,26,0.219925223366146),
	(30,'W_prevent',-1,26,0.219925223366146),(31,'S.',-1,11,0.214926922835098),
	(32,'W_fail',-1,26,0.219925223366146),(33,'E.',11,11,0.218036976498861),
	(34,'W_confidence',-1,11,0.219925223366146),(35,'W_dive',-1,11,0.219925223366146),
	(36,'E.',31,19,0.218036976498861),(37,'E.',42,6,0.218036976498861),
	(38,'W_commitment',-1,11,0.219925223366146),(39,'E.',2,13,0.218036976498861),
	(40,'W_august',-1,13,0.219925223366146),(41,'E.',11,31,0.442960500396057),
	(42,'W_improvement',-1,11,0.219925223366146),(43,'W_of',-1,5,0.219925223366146),
	(44,'U',-1,2,0.00499830053104877),(45,'U',-1,29,0.454845348325439),
	(46,'R_endsWithly%',-1,13,0.214926922835098),(47,'E.',2,11,0.667884024293252),
	(48,'W_past',-1,6,0.219925223366146),(49,'W_monetary',-1,6,0.219925223366146),
	(50,'W_week',-1,11,0.219925223366146),(51,'E.',12,43,0.218036976498861),
	(52,'W_due',-1,6,0.219925223366146),(53,'E.',24,26,0.667884024293252),
	(54,'W_in',-1,5,0.439850446732293),(55,'W_take',-1,26,0.219925223366146),
	(56,'U',-1,13,1.35453944391422),(57,'W_pound',-1,11,0.219925223366146),
	(58,'W_.',-1,43,0.439850446732293),(59,'W_firm',-1,11,0.219925223366146),
	(60,'E.',11,24,0.218036976498861),(61,'E.',11,42,0.218036976498861),
	(62,'E.',5,13,0.442960500396057),(63,'R_endsWithER%',-1,5,0.204930321773),
	(64,'W_a',-1,2,0.659775670098439),(65,'E.',11,12,0.218036976498861),
	(66,'E.',31,29,0.218036976498861),(67,'W_figures',-1,12,0.219925223366146),
	(68,'R_endsWithS%',-1,16,0.419857244608098),(69,'E.',5,11,0.667884024293252),
	(70,'E.',0,13,0.218036976498861),(71,'W_sterling',-1,11,0.219925223366146),
	(72,'E.',6,5,0.218036976498861),(73,'E.',6,11,0.892807548190447),
	(74,'E.',26,24,0.218036976498861),(75,'W_lawson',-1,13,0.219925223366146),
	(76,'W_widely',-1,19,0.219925223366146),(77,'W_september',-1,13,0.219925223366146),
	(78,'E.',42,26,0.218036976498861),(79,'E.',13,13,0.442960500396057),
	(80,'U',-1,26,0.679768872222634),(81,'W_substantial',-1,6,0.219925223366146),
	(82,'W_nigel',-1,13,0.219925223366146),(83,'E.',29,24,0.442960500396057),
	(84,'E.',11,6,0.218036976498861),(85,'R_endsWithED%',-1,29,0.659775670098439),
	(86,'W_policy',-1,11,0.219925223366146),(87,'E.',26,2,0.667884024293252),
	(88,'R_endsWithS%',-1,31,0.419857244608098),(89,'E.',2,6,0.667884024293252),
	(90,'W_near-record',-1,6,0.219925223366146),(91,'R_endsWithS%',-1,12,0.419857244608098),
	(92,'End.',-1,43,0.439850446732293),(93,'R_isDashSeparatedWords%',-1,6,0.219925223366146),
	(94,'W_another',-1,2,0.219925223366146),(95,'W_sharp',-1,6,0.219925223366146),
	(96,'E.',13,5,0.218036976498861),(97,'W_july',-1,13,0.219925223366146),
	(98,'U',-1,19,0.00499830053104877),(99,'U',-1,0,0.00499830053104877),
	(100,'U',-1,5,0.679768872222634),(101,'W_and',-1,0,0.219925223366146),
	(102,'W_if',-1,5,0.219925223366146),(103,'W_release',-1,11,0.219925223366146),
	(104,'E.',13,0,0.218036976498861),(105,'E.',6,12,0.218036976498861),
	(106,'E.',19,29,0.218036976498861),(107,'E.',16,6,0.218036976498861),
	(108,'W_expected',-1,29,0.219925223366146),(109,'W_is',-1,31,0.219925223366146),
	(110,'R_endsWithER%',-1,13,0.429853845670195),(111,'U',-1,11,2.70408058729739),
	(112,'W_the',-1,2,0.659775670098439),(113,'E.',16,29,0.218036976498861),
	(114,'W_over',-1,5,0.219925223366146);

        
        SELECT SUM(abs(c1.weight-c2.weight)) INTO error 
        FROM expected_crf_feature c1, crf_feature c2
        WHERE c1.name = c2.name AND c1.prev_label = c2.prev_label_id AND c1.label = c2.label_id;

        SELECT INTO result CASE WHEN (error < 0.1) THEN 'PASS' ELSE 'FAIL' END;

	IF result = 'FAIL' THEN
	   RAISE EXCEPTION 'Failed install check %', error;
	END IF;

	RETURN result;

END
$$ language plpgsql;

---------------------------------------------------------------------------
-- Test: 
---------------------------------------------------------------------------
SELECT crf_train_install_test();

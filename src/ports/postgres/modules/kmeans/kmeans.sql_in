/* ----------------------------------------------------------------------- *//** 
 *
 * @file kmeans.sql_in
 *
 * @brief Set of functions for k-means clustering.
 *
 * @sa For a brief introduction to k-means clustering, see the module
 *     description \ref grp_kmeans.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_kmeans 

@about

Clustering refers to the problem of partitioning a set of objects according to
some problem-dependent measure of <em>similarity</em>. In the k-means variant,
one is given \f$ n \f$ points \f$ x_1, \dots, x_n \in \mathbf R^d \f$, and the goal is
to position \f$ k \f$ centroids \f$ c_1, \dots, c_k \in \mathbf R^d \f$ so that the sum of squared
distances between each point and its closest centroid is minimized. (A cluster
is identified by its centroid and consists of all points for which this
centroid is closest.) Formally, we wish to minimize the following objective
function:
\f[
    (c_1, \dots, c_k) \mapsto \sum_{i=1}^n \min_{j=1}^k \operatorname{dist}(x_i, c_j)^2
\f]

This problem is computationally difficult (NP-hard), yet the
local-search heuristic proposed by Lloyd [4] performs reasonably well in
practice. In fact, it is so ubiquitous today that it is
often referred to as the <em>standard algorithm</em> or even just the
<em>k-means algorithm</em> [1]. It works as follows:

-# Seed the \f$ k \f$ centroids (see below)
-# Repeat until convergence:
 -# Assign each point to its closest centroid
 -# Move each centroid to the barycenter (mean) of all points currently
    assigned to it
-# Convergence is achieved when no points change their assignments during step 2a.

This algorithm is guaranteed to converge to a local optimum, as it can be 
shown that the objective function decreases in every step.

@implementation

Data points and predefined centroids (if used) are expected to be stored row-wise,
in a column of type <tt>\ref grp_svec "SVEC"</tt> (or any type convertible to
<tt>\ref grp_svec "SVEC"</tt>, like <tt>FLOAT[]</tt> or <tt>INTEGER[]</tt>).
Data points with with non-finite values (NULL, NaN, infinity) in any component
will be skipped during analysis.

The following methods are available for the centroid seeding:
 - <strong>random selection</strong>: 
   Select \f$ k \f$ centroids randomly among the input points.
 - <strong>kmeans++</strong> [2]:
   Start with a single centroid chosen randomly among the input points. Then
   iteratively choose new
   centroids from the input points until there is a total of \f$ k \f$
   centroids. The probability for picking a particular point is proportional to
   its minimum squared distance to any existing centroid.
   \n
   Intuitively, kmeans++ favors seedings where centroids are spread out over the
   whole range of the input points, while at the same time not being too
   susceptible to outliers [2].
   For performance reasons, if the input size is large, the kmeans++
   initialization should only be run on a random sample of the input points. The
   sample size can be specified as a fraction of all input points 
   (default: 0.01).
 - <strong>user-specified set of initial centroids</strong>:
   See below for a description of the expected format of the set of initial
   centroids.

The following distance functions can be used (computation of barycenter/mean in parentheses):
 - <strong>l1norm/Manhattan</strong> (element-wise mean)
 - <strong>l2norm/Euclidean</strong> (element-wise mean)
 - <strong>cosine</strong> (element-wise mean of normalized points)
 - <strong>tanimoto</strong> (element-wise mean of normalized points)

The algorithm stops when one of the following conditions is met:
 - The fraction of updated points is smaller than convergence threshold (default: 0.001).
 - The algorithm reached the maximum number of allowed iterations (default: 20).

A popular method to assess the quality of the clustering is the
<em>silhouette coefficient</em>, a simplified version of which can be computed
optionally [3]. Since for large data sets this computation is expensive, it is
turned off by default (evaluate = False).

@input
The <strong>source relation</strong> is expected to be of the following form:
<pre>{TABLE|VIEW} <em>data_points</em> (
    ...
    [ <em>point_id</em> INTEGER, ]
    <em>point_coordinates</em> {SVEC|FLOAT[]|INTEGER[]},
    ...
)</pre>
where:
 - <em>point_id</em> is the name of an optional column with a unique ID of the data point
 - <em>point_coordinates</em> is the name of a column with point coordinates 

If kmeans is called with a set of initial centroids, the 
centroid relation is expected to be of the following form:
<pre>{TABLE|VIEW} <em>initial_centroids</em> (
    ...
    <em>centroid_coordinates</em> {SVEC|FLOAT[]|INTEGER[]},
    ...
)</pre>
where:
 - <em>centroid_coordinates</em> is the name of a column with coordinates 
 
@usage
The k-means algorithm can be invoked in four possible ways:

- using <em>random</em> centroid seeding method for a 
provided \f$ k \f$:
<pre>SELECT * FROM \ref kmeans_random(
  '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
  '<em>out_points</em>', '<em>out_centroids</em>',
  '<em>dist_metric</em>',
  <em>max_iter</em>, <em>conv_threshold</em>,
  <em>evaluate</em>, <em>verbose</em>,
  <em>k</em>
);</pre>

- using <em>kmeans++</em> centroid seeding method for a 
provided \f$ k \f$:
<pre>SELECT * FROM \ref kmeans_plusplus(
  '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
  '<em>out_points</em>', '<em>out_centroids</em>',
  '<em>dist_metric</em>',
  <em>max_iter</em>, <em>conv_threshold</em>,
  <em>evaluate</em>, <em>verbose</em>,
  <em>k</em>, <em>sample_frac</em>
);</pre>

- with a provided centroid set:
<pre>SELECT * FROM \ref kmeans_cset(
  '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
  '<em>out_points</em>', '<em>out_centroids</em>',
  '<em>dist_metric</em>',
  <em>max_iter</em>, <em>conv_threshold</em>,
  <em>evaluate</em>, <em>verbose</em>,
  '<em>init_cset_rel</em>', '<em>init_cset_col</em>'
);</pre>

The output centroid set will be stored in the <tt>out_centroids</tt> table 
with the following structure:
<pre>
 cid |  coords                   
-----+-------------
        ...
</pre>

The cluster assignments for each data point will be stored in the
<tt>out_points</tt> table with the following structure:
<pre>
 pid |  coords  | cid 
-----+----------+-----
         ...
</pre>

@examp

-#  Prepare some input data.
\code
sql> SELECT * FROM public.km_sample LIMIT 5;
          coords          
--------------------------
 {1,1}:{6.76976,39.89516}
 {1,1}:{6.92655,39.54273}
 {1,1}:{6.78933,39.71434}
 {1,1}:{7.24073,39.61291}
 {1,1}:{6.72292,39.05652}
(5 rows)
\endcode    
-#  Run k-means clustering using kmeans++ for centroid seeding
(below example is executed in Verbose mode):
\code
sql> SELECT * FROM madlib.kmeans_plusplus( 
    'km_sample', 'coords', null,
    'km_p', 'km_c',
    'l2norm',
    10, 0.001,
    True, True,
    10, null
);
INFO:  ('Started k-means clustering with parameters:',)
INFO:  (' * src_relation = public.km_sample',)
INFO:  (' * src_col_data = coords',)
INFO:  (' * src_col_id = None (will be auto-generated)',)
INFO:  (' * init_method = kmeans++ (sample=0.01)',)
INFO:  (' * initial k = 10',)
INFO:  (' * dist_metric = l2norm',)
INFO:  (' * evaluate = True (model coefficient evaluation)',)
INFO:  (' * output_points = public.km_p',)
INFO:  (' * output_centroids = public.km_c',)
INFO:  (' * verbose = True',)
INFO:  ('Input:',)
INFO:  ('... analyzing data points',)
INFO:  (' * points: 10000 (2 dimensions), kept 10000 after removing NULLs',)
INFO:  ('... generating initial centroids',)
INFO:  (' * centroids: 10 seeded using kmeans++ (0.351 sec)',)
INFO:  ('Execution:',)
INFO:  ('... Iteration 1: updated 10000 points (0.212 sec)',)
INFO:  ('... Iteration 2: updated 136 points (0.399 sec)',)
INFO:  ('... Iteration 3: updated 74 points (0.2 sec)',)
INFO:  ('... Iteration 4: updated 58 points (0.28 sec)',)
INFO:  ('... Iteration 5: updated 66 points (0.261 sec)',)
INFO:  ('... Iteration 6: updated 51 points (0.248 sec)',)
INFO:  ('... Iteration 7: updated 36 points (0.257 sec)',)
INFO:  ('... Iteration 8: updated 23 points (0.255 sec)',)
INFO:  ('... Iteration 9: updated 21 points (0.31 sec)',)
INFO:  ('... Iteration 10: updated 13 points (0.25 sec)',)
INFO:  ('Exit condition: reached maximum number of iterations = 10',)
INFO:  ('Writing final output table: public.km_p...',)
INFO:  ('... 0.033 sec',)
INFO:  ('Calculating model cost function and simplified Silhouette coefficient...',)
INFO:  ('... 0.121 sec',)
-[ RECORD 1 ]-+-----------------
src_relation  | km_sample
point_count   | 10000
init_method   | kmeans++
k             | 10
dist_metric   | l2norm
iterations    | 10
cost_func     | 36424.9019377
silhouette    | 0.710664950775
out_points    | km_p
out_centorids | km_c              
\endcode

@literature

[1] Wikipedia, K-means Clustering,
    http://en.wikipedia.org/wiki/K-means_clustering

[2] David Arthur, Sergei Vassilvitskii: k-means++: the advantages of careful
    seeding, Proceedings of the 18th Annual ACM-SIAM Symposium on Discrete
    Algorithms (SODA'07), pp. 1027-1035,
    http://www.stanford.edu/~darthur/kMeansPlusPlus.pdf

[3] E. R. Hruschka, L. N. C. Silva, R. J. G. B. Campello: Clustering
    Gene-Expression Data: A Hybrid Approach that Iterates Between k-Means and
    Evolutionary Search. In: Studies in Computational Intelligence - Hybrid
    Evolutionary Algorithms. pp. 313-335. Springer. 2007.
    
[4] Lloyd, Stuart: Least squares quantization in PCM. Technical Note, Bell
    Laboratories. Published much later in: IEEE Transactions on Information
    Theory 28(2), pp. 128-137. 1982.

@sa File kmeans.sql_in documenting the SQL functions.

@internal
@sa namespace kmeans (documenting the implementation in Python)
@endinternal
*/

/**
 * @internal
 * @brief Given a point, find all canopies that are closer than threshold
 * @param point The point
 * @param allCanopies Array of canopies
 * @param threshold Threshold distance below which a point is included in the
 *     output array
 * @param distMetric ID of the metric to use
 * @return Array of positions in \c allCanopies that are close to the given
 *     point
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_get_array_of_close_canopies( 
    "point"               MADLIB_SCHEMA.SVEC,
    "allCanopies"         MADLIB_SCHEMA.SVEC[],
    "threshold"           FLOAT8,
    "dist_metric"         INTEGER
)
RETURNS INTEGER[] AS
'MODULE_PATHNAME'
LANGUAGE c
IMMUTABLE
STRICT;


/**
 * @internal
 * @brief Given a point, find the closest centroid
 * @param point The point
 * @param centroidCoordinates Array of centroids
 * @param dimension Dimension of points
 * @param numOfCentroids Total count of centroids
 * @param distMetric ID of the metric to use
 * @param closeCentroids List of positions in the \c centroidCoordinates array
 *     that should be considered. The distance to all other centroids is
 *     conceptually infinity. If NULL, then all centroids in
 *     \c centroidCoordinates are considered.
 * @return The position in \c centroidCoordinates that is closest to \c point
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_kmeans_closest_centroid( 
    "point"               FLOAT8[],
    "centroidCoordinates" FLOAT8[],
    "dimension"           INTEGER,
    "numOfCentroids"      INTEGER,
    "dist_metric"         INTEGER,
    "closeCentroids"      INTEGER[]
)
RETURNS INTEGER AS
'MODULE_PATHNAME'
LANGUAGE c
IMMUTABLE; /* This function must *not* be declared STRICT! */

/**
 * @internal
 * @brief Transition function for UDA:internal_kmeans_agg_centroid() 
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_kmeans_agg_centroid_trans( 
    "centroids_array"               FLOAT8[],
    "centroidCoordinate"            FLOAT8[],
    "dimension"                     INTEGER,
    "numOfCentroids"                INTEGER,
    "centroidIndex"                 INTEGER
)
RETURNS FLOAT8[] AS
'MODULE_PATHNAME'
LANGUAGE c
IMMUTABLE; /* This function must *not* be declared STRICT! */

/**
 * @internal
 * @brief Merge function for UDA:internal_kmeans_agg_centroid() 
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_kmeans_agg_centroid_merge( 
    "centroids_array"               FLOAT8[],
    "centroids_array2"              FLOAT8[]    
)
RETURNS FLOAT8[] AS
'MODULE_PATHNAME'
LANGUAGE c
IMMUTABLE STRICT;


CREATE AGGREGATE MADLIB_SCHEMA.internal_kmeans_agg_centroid(
    FLOAT8[],
    INTEGER,
    INTEGER,
    INTEGER
) (
    sfunc = MADLIB_SCHEMA.internal_kmeans_agg_centroid_trans,
    m4_ifdef(`__GREENPLUM__', `
        prefunc = MADLIB_SCHEMA.internal_kmeans_agg_centroid_merge,
    ')
    stype = FLOAT8[]
);


/**
 * @internal
 * @brief Transition function for UDA:kmeans_canopy() 
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_kmeans_canopy_transition(
    state           MADLIB_SCHEMA.svec[]
    , pcoords       MADLIB_SCHEMA.svec
    , dist_metric   INTEGER
    , threshold     FLOAT8
)
RETURNS MADLIB_SCHEMA.svec[] AS 
'MODULE_PATHNAME'
LANGUAGE c
IMMUTABLE
STRICT;

/**
 * @internal
 * @brief Generates canopies in a single table scan. UDA:kmeans_canopy() 
 */
CREATE AGGREGATE MADLIB_SCHEMA.kmeans_canopy(
    MADLIB_SCHEMA.svec  -- new point coordinates
    , INTEGER           -- distance metric
    , FLOAT8            -- threshold (T1)
) (
    stype = MADLIB_SCHEMA.svec[],
    sfunc = MADLIB_SCHEMA.internal_kmeans_canopy_transition,
m4_ifdef(`__GREENPLUM__', `
    prefunc = array_cat,
')
    initcond = '{}'
);

/**
 * @internal
 * @brief After merging canopies, remove those that are close to each other.
 *    This is essentilly a pivoted version of kmeans_canopy
 *
 * @param all_canopies The array of all canopies (their coordinates)
 * @param dist_metric ID of the metric to use
 * @param threshold The threshold distance below which we drop canopies
 * @returns The pruned array of canopies
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_remove_close_canopies(
    "all_canopies"  MADLIB_SCHEMA.svec[],
    "dist_metric"   INTEGER,
    "threshold"     FLOAT8
)
RETURNS MADLIB_SCHEMA.svec[] AS 
'MODULE_PATHNAME'
LANGUAGE c
IMMUTABLE
STRICT;

/**
 * @internal
 * @brief Kmeans result data type
 */
CREATE TYPE MADLIB_SCHEMA.kmeans_result AS (
    src_relation    TEXT,
    point_count     BIGINT,
    init_method     TEXT,
    k               INT,
    dist_metric     TEXT,
    iterations      INT,
    cost_func       FLOAT,
    silhouette      FLOAT,
    out_points      TEXT,
    out_centorids   TEXT
);
 
/**
 * @brief Computes k-means clustering with user provided initial centroid set. 
 *
 * @param src_relation Name of the relation containing input data 
 * @param src_col_data Name of the column containing the point coordinates 
 *        (acceptable types: <tt>\ref grp_svec "SVEC"</tt>, <tt>INTEGER[]</tt>,
 *        <tt>FLOAT[]</tt>)
 * @param src_col_id Name of the column containing the unique point identifiers 
 *        (optional)
 * @param out_points Name of the output relation for point/centroids assignments
 * @param out_centroids Name of the output relation for the list of centroids 
 * @param dist_metric Name of the metric to use for distance calculation, 
 *        available options are: <tt>'euclidean'</tt>/<tt>'l2norm'</tt>,
 *        <tt>'manhattan'</tt>/<tt>'l1norm'</tt>, <tt>'cosine</tt>,
 *        <tt>'tanimoto'</tt>
 * @param max_iter Maximum number of iterations 
 * @param conv_threshold Convergence threshold expressed as fraction of points
 *        that changed centroid assignment
 * @param evaluate Calculate model evaluation coefficient
 * @param verbose Generate detailed information during execution
 * @param init_cset_rel Name of the relation containing the initial set of 
 *        centroids
 * @param init_cset_col Name of the column containing the coordinates
 *        (acceptable types: <tt>\ref grp_svec "SVEC"</tt>, <tt>INTEGER[]</tt>,
 *        <tt>FLOAT[]</tt>)
 * 
 * @return A composite value:
 *  - <tt>src_relation TEXT</tt> - name of the source relation,
 *  - <tt>point_count BIGINT</tt> - number of analyzed data points \f$ \boldsymbol n \f$
 *  - <tt>init_method TEXT</tt> - centroid seeding method used: one of
 *    <tt>'random'</tt>, <tt>'kmeans++'</tt>, 
 *    <tt>'provided set'</tt>
 *  - <tt>k INTEGER</tt> - initial number of centroids, \f$ k \f$
 *  - <tt>dist_metric TEXT</tt> - distance metric used: one of
 *    <tt>'l1norm'</tt>, <tt>'l2norm'</tt>, <tt>'cosine'</tt>, <tt>'tanimoto'</tt>
 *  - <tt>iterations INTEGER</tt> - number of iterations executed,
 *  - <tt>cost_func FLOAT</tt> - Cost function value for the model
 *  - <tt>silhouette FLOAT</tt> - Silhouette coefficient of the full model
 *  - <tt>out_points FLOAT</tt> - name of the output relation for data points
 *  - <tt>out_centroids FLOAT</tt> - name of the output relation for centroids
 * 
 * @usage
 *  - Run k-means clustering with a provided centroid set:
 *    <pre>SELECT * FROM kmeans_cset(
 *      '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
 *      '<em>out_points</em>', '<em>out_centroids</em>',
 *      '<em>dist_metric</em>',
 *      <em>max_iter</em>, <em>conv_threshold</em>,
 *      <em>evaluate</em>, <em>verbose</em>,
 *      '<em>init_cset_rel</em>', '<em>init_cset_col</em>'
 * );</pre>
 *
 * @note This function starts an iterative algorithm. It is not an aggregate
 *       function. Source relation and column names have to be passed as strings 
 *       (due to limitations of the SQL syntax).
 *
 */ 
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.kmeans_cset( 
  src_relation      TEXT        
  , src_col_data    TEXT
  , src_col_id      TEXT
  , out_points      TEXT 
  , out_centroids   TEXT
  , dist_metric     TEXT        
  , max_iter        INT         /*+ DEFAULT 20 */
  , conv_threshold  FLOAT       /*+ DEFAULT 0.001 */
  , evaluate        BOOLEAN     /*+ DEFAULT True */
  , verbose         BOOLEAN     /*+ DEFAULT False */
  , init_cset_rel   TEXT
  , init_cset_col   TEXT
) 
RETURNS MADLIB_SCHEMA.kmeans_result
AS $$

    PythonFunctionBodyOnly(`kmeans', `kmeans')
    
    # MADlibSchema comes from PythonFunctionBodyOnly
    return kmeans.kmeans( 
        MADlibSchema
        , src_relation, src_col_data, src_col_id
        , init_cset_rel, init_cset_col
        , None, None        # init_method, sample_frac
        , None, None, None  # k, t1, t2
        , dist_metric
        , max_iter, conv_threshold, evaluate
        , out_points, out_centroids
        , verbose
    );

$$ LANGUAGE plpythonu;

/**
 * @brief Computes k-means clustering using kmeans++ for centroid seeding.  
 * 
 * For k-means clustering with user provided centroid set and the other seeding
 * methods see the other k-means signature.
 *
 * @param src_relation Name of the relation containing input data 
 * @param src_col_data Name of the column containing the point coordinates 
 *        (acceptable types: <tt>\ref grp_svec "SVEC"</tt>, <tt>INTEGER[]</tt>,
 *        <tt>FLOAT[]</tt>)
 * @param src_col_id Name of the column containing the unique point identifiers 
 *        (optional)
 * @param out_points Name of the output relation for point/centroids assignments
 * @param out_centroids Name of the output relation for the list of centroids 
 * @param dist_metric Name of the metric to use for distance calculation, 
 *        available options are: <tt>'euclidean'</tt>/<tt>'l2norm'</tt>,
 *        <tt>'manhattan'</tt>/<tt>'l1norm'</tt>, <tt>'cosine</tt>,
 *        <tt>'tanimoto'</tt>
 * @param max_iter Maximum number of iterations 
 * @param conv_threshold Convergence threshold expressed as fraction of points
 *        that changed centroid assignment
 * @param evaluate Calculate model evaluation coefficient
 * @param verbose Generate detailed information during execution
 * @param k Number of initial centroids to be generated
 * @param sample_frac Fraction of points (between 0 and 1) to use as sample for
 *        kmeans++ seeding.
 * 
 * @return A composite value:
 *  - <tt>src_relation TEXT</tt> - name of the source relation,
 *  - <tt>point_count BIGINT</tt> - number of analyzed data points \f$ \boldsymbol n \f$
 *  - <tt>init_method TEXT</tt> - centroid seeding method used: one of
 *    <tt>'random'</tt>, <tt>'kmeans++'</tt>, 
 *    <tt>'provided set'</tt>
 *  - <tt>k INTEGER</tt> - initial number of centroids, \f$ k \f$
 *  - <tt>dist_metric TEXT</tt> - distance metric used: one of
 *    <tt>'l1norm'</tt>, <tt>'l2norm'</tt>, <tt>'cosine'</tt>, <tt>'tanimoto'</tt>
 *  - <tt>iterations INTEGER</tt> - number of iterations executed,
 *  - <tt>cost_func FLOAT</tt> - Cost function value for the model
 *  - <tt>silhouette FLOAT</tt> - Silhouette coefficient of the full model
 *  - <tt>out_points FLOAT</tt> - name of the output relation for data points
 *  - <tt>out_centroids FLOAT</tt> - name of the output relation for centroids
 * 
 * @usage
 *  - Run k-means clustering with a provided centroid set:
 *    <pre>SELECT * FROM kmeans_plusplus(
 *      '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
 *      '<em>out_points</em>', '<em>out_centroids</em>',
 *      '<em>dist_metric</em>',
 *      <em>max_iter</em>, <em>conv_threshold</em>,
 *      <em>evaluate</em>, <em>verbose</em>,
 *      <em>k</em>, <em>sample_frac</em>
 * );</pre>
 *
 * @note This function starts an iterative algorithm. It is not an aggregate
 *       function. Source relation and column names have to be passed as strings 
 *       (due to limitations of the SQL syntax).
 *
 */ 
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.kmeans_plusplus( 
  src_relation      TEXT        
  , src_col_data    TEXT
  , src_col_id      TEXT
  , out_points      TEXT 
  , out_centroids   TEXT
  , dist_metric     TEXT        
  , max_iter        INT         /*+ DEFAULT 20 */
  , conv_threshold  FLOAT       /*+ DEFAULT 0.001 */
  , evaluate        BOOLEAN     /*+ DEFAULT True */
  , verbose         BOOLEAN     /*+ DEFAULT False */
  , k               INT 
  , sample_frac     FLOAT       /*+ DEFAULT 0.01 */
) 
RETURNS MADLIB_SCHEMA.kmeans_result
AS $$

    PythonFunctionBodyOnly(`kmeans', `kmeans')
    
    # MADlibSchema comes from PythonFunctionBodyOnly
    return kmeans.kmeans( 
        MADlibSchema
        , src_relation, src_col_data, src_col_id
        , None, None    # init_cset_rel, init_cset_col
        , 'kmeans++', sample_frac, k
        , None, None    # t1, t2
        , dist_metric
        , max_iter, conv_threshold, evaluate
        , out_points, out_centroids
        , verbose
    );

$$ LANGUAGE plpythonu;

/**
 * @brief Computes k-means clustering using random centroid seeding.  
 * 
 * For k-means clustering with user provided centroid set and the other seeding
 * methods see the other k-means signature.
 *
 * @param src_relation Name of the relation containing input data 
 * @param src_col_data Name of the column containing the point coordinates 
 *        (acceptable types: <tt>\ref grp_svec "SVEC"</tt>, <tt>INTEGER[]</tt>,
 *        <tt>FLOAT[]</tt>)
 * @param src_col_id Name of the column containing the unique point identifiers 
 *        (optional)
 * @param out_points Name of the output relation for point/centroids assignments
 * @param out_centroids Name of the output relation for the list of centroids 
 * @param dist_metric Name of the metric to use for distance calculation, 
 *        available options are: <tt>'euclidean'</tt>/<tt>'l2norm'</tt>,
 *        <tt>'manhattan'</tt>/<tt>'l1norm'</tt>, <tt>'cosine</tt>,
 *        <tt>'tanimoto'</tt>
 * @param max_iter Maximum number of iterations 
 * @param conv_threshold Convergence threshold expressed as fraction of points
 *        that changed centroid assignment
 * @param evaluate Calculate model evaluation coefficient
 * @param verbose Generate detailed information during execution
 * @param k Number of initial centroids to be generated
 * 
 * @return A composite value:
 *  - <tt>src_relation TEXT</tt> - name of the source relation,
 *  - <tt>point_count BIGINT</tt> - number of analyzed data points \f$ \boldsymbol n \f$
 *  - <tt>init_method TEXT</tt> - centroid seeding method used: one of
 *    <tt>'random'</tt>, <tt>'kmeans++'</tt>, 
 *    <tt>'provided set'</tt>
 *  - <tt>k INTEGER</tt> - initial number of centroids, \f$ k \f$
 *  - <tt>dist_metric TEXT</tt> - distance metric used: one of
 *    <tt>'l1norm'</tt>, <tt>'l2norm'</tt>, <tt>'cosine'</tt>, <tt>'tanimoto'</tt>
 *  - <tt>iterations INTEGER</tt> - number of iterations executed,
 *  - <tt>cost_func FLOAT</tt> - Cost function value for the model
 *  - <tt>silhouette FLOAT</tt> - Silhouette coefficient of the full model
 *  - <tt>out_points FLOAT</tt> - name of the output relation for data points
 *  - <tt>out_centroids FLOAT</tt> - name of the output relation for centroids
 * 
 * @usage
 *  - Run k-means clustering using random centroid initialization:
 *    <pre>SELECT * FROM kmeans_random(
 *      '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
 *      '<em>out_points</em>', '<em>out_centroids</em>',
 *      '<em>dist_metric</em>',
 *      <em>max_iter</em>, <em>conv_threshold</em>,
 *      <em>evaluate</em>, <em>verbose</em>,
 *      <em>k</em>
 * );</pre>
 *
 * @note This function starts an iterative algorithm. It is not an aggregate
 *       function. Source relation and column names have to be passed as strings 
 *       (due to limitations of the SQL syntax).
 *
 */ 
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.kmeans_random( 
  src_relation      TEXT        
  , src_col_data    TEXT
  , src_col_id      TEXT
  , out_points      TEXT 
  , out_centroids   TEXT
  , dist_metric     TEXT        
  , max_iter        INT         /*+ DEFAULT 20 */
  , conv_threshold  FLOAT       /*+ DEFAULT 0.001 */
  , evaluate        BOOLEAN     /*+ DEFAULT True */
  , verbose         BOOLEAN     /*+ DEFAULT False */
  , k               INT 
) 
RETURNS MADLIB_SCHEMA.kmeans_result
AS $$

    PythonFunctionBodyOnly(`kmeans', `kmeans')
    
    # MADlibSchema comes from PythonFunctionBodyOnly
    return kmeans.kmeans( 
        MADlibSchema
        , src_relation, src_col_data, src_col_id
        , None, None    # init_cset_rel, init_cset_col
        , 'random'
        , None          # sample_frac
        , k
        , None, None    # t1, t2
        , dist_metric
        , max_iter, conv_threshold, evaluate
        , out_points, out_centroids
        , verbose
    );    

$$ LANGUAGE plpythonu;

/**
 * @internal
 * @brief Computes k-means clustering using canopy for centroid seeding.  
 * 
 * For k-means clustering with user provided initial centroid set and for other
 * seeding methods see the other k-means signature.
 *
 * @param src_relation Name of the relation containing input data 
 * @param src_col_data Name of the column containing the point coordinates 
 *        (acceptable types: <tt>\ref grp_svec "SVEC"</tt>, <tt>INTEGER[]</tt>,
 *        <tt>FLOAT[]</tt>)
 * @param src_col_id Name of the column containing the unique point identifiers 
 *        (optional)
 * @param out_points Name of the output relation for point/centroids assignments
 * @param out_centroids Name of the output relation for the list of centroids 
 * @param dist_metric Name of the metric to use for distance calculation, 
 *        available options are: <tt>'euclidean'</tt>/<tt>'l2norm'</tt>,
 *        <tt>'manhattan'</tt>/<tt>'l1norm'</tt>, <tt>'cosine</tt>,
 *        <tt>'tanimoto'</tt>
 * @param max_iter Maximum number of iterations 
 * @param conv_threshold Convergence threshold expressed as fraction of points
 *        that changed centroid assignment
 * @param evaluate Calculate model evaluation coefficient
 * @param verbose Generate detailed information during execution
 * @param t1 Larger threshold for the canopy seeding (optional).
 * @param t2 Smaller threshold for the canopy seeding (optional).
 * 
 * @return A composite value:
 *  - <tt>src_relation TEXT</tt> - name of the source relation,
 *  - <tt>point_count BIGINT</tt> - number of analyzed data points \f$ \boldsymbol n \f$
 *  - <tt>init_method TEXT</tt> - centroid seeding method used: one of
 *    <tt>'random'</tt>, <tt>'kmeans++'</tt>, <tt>'canopy'</tt>,
 *    <tt>'provided set'</tt>
 *  - <tt>k INTEGER</tt> - initial number of centroids, \f$ k \f$
 *  - <tt>dist_metric TEXT</tt> - distance metric used: one of
 *    <tt>'l1norm'</tt>, <tt>'l2norm'</tt>, <tt>'cosine'</tt>, <tt>'tanimoto'</tt>
 *  - <tt>iterations INTEGER</tt> - number of iterations executed,
 *  - <tt>cost_func FLOAT</tt> - Cost function value for the model
 *  - <tt>silhouette FLOAT</tt> - Silhouette coefficient of the full model
 *  - <tt>out_points FLOAT</tt> - name of the output relation for data points
 *  - <tt>out_centroids FLOAT</tt> - name of the output relation for centroids
 * 
 * @usage
 *  - Run k-means clustering using canopy clustering for the centroid seeding:
 *    <pre>SELECT * FROM kmeans_canopy(
 *      '<em>src_relation</em>', '<em>src_col_data</em>', '<em>src_col_id</em>',
 *      '<em>out_points</em>', '<em>out_centroids</em>',
 *      '<em>dist_metric</em>',
 *      <em>max_iter</em>, <em>conv_threshold</em>,
 *      <em>evaluate</em>, <em>verbose</em>,
 *      <em>t1</em>, <em>t2</em>
 * );</pre>
 *
 * @note This function starts an iterative algorithm. It is not an aggregate
 *       function. Source relation and column names have to be passed as strings 
 *       (due to limitations of the SQL syntax).
 *
 */ 
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.kmeans_canopy( 
  src_relation      TEXT        
  , src_col_data    TEXT
  , src_col_id      TEXT
  , out_points      TEXT 
  , out_centroids   TEXT
  , dist_metric     TEXT        
  , max_iter        INT         /*+ DEFAULT 20 */
  , conv_threshold  FLOAT       /*+ DEFAULT 0.001 */
  , evaluate        BOOLEAN     /*+ DEFAULT True */
  , verbose         BOOLEAN     /*+ DEFAULT False */
  , t1              FLOAT 
  , t2              FLOAT 
) 
RETURNS MADLIB_SCHEMA.kmeans_result
AS $$

    PythonFunctionBodyOnly(`kmeans', `kmeans')
    
    # MADlibSchema comes from PythonFunctionBodyOnly
    return kmeans.kmeans( 
        MADlibSchema
        , src_relation, src_col_data, src_col_id
        , None, None    # init_cset_rel, init_cset_col
        , 'canopy'
        , None, None    # sample_frac, k
        , t1, t2
        , dist_metric
        , max_iter, conv_threshold, evaluate
        , out_points, out_centroids
        , verbose
    );

$$ LANGUAGE plpythonu;

/**
 * @internal
 * @brief Generates sample random data for k-means clustering.  
 * 
 * For k-means clustering with user provided initial centroid set see the other 
 * k-means signature.
 *
 * @param dim Number of dimensions
 * @param k Number of clusters 
 * @param ppk Numboer of data points per cluster
 * @param maxval Maximum value for the random cluster coordinates
 * @param width Average width of each cluster in every dimension
 * @param outrel Name of the output relation
 * 
 * @return The name of the table with sample data.
 *
 * @usage
 *  - To create some sample data points organized in clusters run:
 *    <pre>SELECT * FROM kmeans_sample_data(
 *      <em>dim</em>, <em>k</em>, <em>ppk</em>
 *      , <em>maxval</em>, <em>width</em>
 *      , '<em>outrel</em>'
 * );</pre>
 *
 */
-- FIXME: I (Florian) don't think this function should become part of the API as is
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.kmeans_sample_data( 
    dim     INTEGER,
    k       INTEGER,
    ppk     BIGINT,
    maxval  FLOAT,
    width   FLOAT,
    outrel  TEXT
)
RETURNS TEXT
AS $$
DECLARE
    sql     TEXT;
    i       INTEGER;
BEGIN    

    EXECUTE 'DROP TABLE IF EXISTS ' || outrel;

    -- Start SQL string
    sql := 'CREATE TABLE ' || outrel || ' as 
    SELECT
        array[ ';
    
    -- For all dimensions
    FOR i in 1..dim LOOP    
        IF i > 1 THEN 
            sql := sql || ', ';
        END IF;
        sql := sql || 'round( x' || i || ' + random()::numeric * ' || width || ', 5)';
    END LOOP;
    
    sql := sql || ']::float[]::MADLIB_SCHEMA.svec as coords    
    FROM
        (
        SELECT ';

    -- For all dimension
    FOR i in 1..dim LOOP    
        IF i > 1 THEN 
            sql := sql || ', ';
        END IF;
        sql := sql || 'round( random()::numeric * ' || maxval || ', 5) AS x' || i;
    END LOOP;

    -- Finish SQL string
    sql := sql || '    
        FROM
            (SELECT generate_series(1,' || k || ') c) c 
        ) xyz
        , (SELECT generate_series(1,' || ppk || ') p) as p
        m4_ifdef(`__GREENPLUM__',`DISTRIBUTED RANDOMLY')';

    EXECUTE sql;

    RETURN outrel;    

END;
$$ LANGUAGE plpgsql STRICT;

---------------------------------------------------------------------------
-- Rules: 
-- ------
-- Any DB objects should be created w/o schema prefix,
-- since this file is executed in a separate schema context.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Setup: 
---------------------------------------------------------------------------
SELECT setseed( extract( epoch from current_timestamp)-floor( extract( epoch from current_timestamp)));

SELECT * FROM MADLIB_SCHEMA.kmeans_sample_data( 
    2,      -- # of dimensions
    10,     -- # of clusters
    1000,    -- # of points per cluster
    1000,   -- max value of a cluster coordinate
    10,     -- average width of a cluster in every dimension
    'km_testdata'
);

INSERT INTO km_testdata values ('{1,1}:{19.99,NULL}'::MADLIB.svec);
INSERT INTO km_testdata values ('{1,1}:{19.99,-Infinity}'::MADLIB.svec);
INSERT INTO km_testdata values ('{1,1}:{19.99,Infinity}'::MADLIB.svec);
INSERT INTO km_testdata values ('{1,1}:{19.99,NAN}'::MADLIB.svec);

---------------------------------------------------------------
-- Test
---------------------------------------------------------------
-- Run k-means using kmeans++() seeding 
DROP TABLE IF EXISTS km_points;
DROP TABLE IF EXISTS km_cents;
SELECT * FROM MADLIB_SCHEMA.kmeans_plusplus( 
    'km_testdata'               -- relation 
    , 'coords', null            -- data col, id col
    , 'km_points', 'km_cents'   -- out points, out centroids
    , 'l2norm'                  -- distance metric
    , 5, 0.001                  -- max iter, convergence threshold
    , True, True                -- evaluate, verbose
    , 10, 0.01                  -- k, sample_fraq   			
);

-- Run k-means using random() seeding 
DROP TABLE IF EXISTS km_points;
DROP TABLE IF EXISTS km_cents;
SELECT * FROM MADLIB_SCHEMA.kmeans_random( 
    'km_testdata'               -- relation 
    , 'coords', null            -- data col, id col
    , 'km_points', 'km_cents'   -- out points, out centroids
    , 'l1norm'                  -- distance metric
    , 5, 0.001                  -- max iter, convergence threshold
    , True, True                -- evaluate, verbose
    , 10                        -- k  			
);

-- Run k-means using canopy() seeding 
DROP TABLE IF EXISTS km_points;
DROP TABLE IF EXISTS km_cents;
SELECT * FROM MADLIB_SCHEMA.kmeans_canopy( 
    'km_testdata'               -- relation 
    , 'coords', null            -- data col, id col
    , 'km_points', 'km_cents'   -- out points, out centroids
    , 'l1norm'                  -- distance metric
    , 5, 0.001                  -- max iter, convergence threshold
    , True, True                -- evaluate, verbose
    , null, null                -- t1, t2			
);

-- Create a view with FLOAT[] data type
CREATE VIEW km_testdata_float123 
AS SELECT coords::float[] AS coords FROM km_testdata;

-- Run k-means using prepared centroid set
CREATE TABLE mycents AS SELECT * FROM km_cents;
DROP TABLE IF EXISTS km_points;
DROP TABLE IF EXISTS km_cents;
SELECT * FROM MADLIB_SCHEMA.kmeans_cset( 
    'km_testdata_float123'      -- relation 
    , 'coords', null            -- data col, id col
    , 'km_points', 'km_cents'   -- out points, out centroids
    , 'tanimoto'                -- distance metric
    , 5, 0.001                  -- max iter, convergence threshold
    , True, True                -- evaluate, verbose
    , 'mycents', 'coords'       -- init relation, init column
);

-- Show results
SELECT cid, count(*) FROM km_points GROUP BY 1;
# coding=utf-8
m4_changequote(<!,!>)

"""
@file kmeans_new.py_in

@brief k-Means: Driver functions

@namespace kmeans_new

@brief k-Means: Driver functions
"""

import plpy

# FIXME: The following classes should be moved in the new driver abstraction layer
class MinWarning:
    def __init__(self, warningLevel = 'error'):
        self.warningLevel = warningLevel

    def __enter__(self):
        self.oldMsgLevel = plpy.execute("""
            SELECT setting FROM pg_settings WHERE name='client_min_messages'
        """)[0]['setting']
        plpy.execute("""
            SET client_min_messages = {warningLevel}
            """.format(warningLevel = self.warningLevel))
        return self

    def __exit__(self, *args):
        plpy.execute("""
            SET client_min_messages = {oldMsgLevel};
            """.format(oldMsgLevel = self.oldMsgLevel))

class IterationController:
    """
    @brief Abstraction for implementing driver functions in PL/Python

    This class encapsulates handling of the inter-iteration state. The design
    goal is to avoid any conversion between backend-native types and those of
    procedureal languages like PL/Python. Therefore, the expectation is that
    all only "template" parameters are passes as PL/Python arguments, whereas
    non-template arguments are provided in an argument table. Here, "template"
    arguments are those parameters that cannot be SQL parameters, such as table
    and column names.

    The inter-state iteration table contains two columns:
    - <tt>_iteration INTEGER</tt> - The 0-based iteration number
    - <tt>_state <em>self.kwargs.stateType</em></tt> - The state (after
      iteration \c _interation)
    """

    def __init__(self, rel_args, rel_state, stateType,
            temporaryTables = True,
            truncAfterIteration = False,
            schema_madlib = "MADLIB_SCHEMA_MISSING",
            verbose = False,
            **kwargs):
        self.kwargs = kwargs
        self.kwargs.update(
            rel_args = ('pg_temp.' if temporaryTables else '') + rel_args,
            rel_state = ('pg_temp.' if temporaryTables else '') + rel_state,
            unualified_rel_state = rel_state,
            stateType = stateType.format(schema_madlib = schema_madlib),
            schema_madlib = schema_madlib)
        self.temporaryTables = temporaryTables
        self.truncAfterIteration = truncAfterIteration
        self.verbose = verbose
        self.inWith = False
        self.iteration = -1

    def __enter__(self):
        with MinWarning('warning'):
            self.runSQL("""
                DROP TABLE IF EXISTS {rel_state};
                CREATE {temp} TABLE {unualified_rel_state} (
                    _iteration INTEGER PRIMARY KEY,
                    _state {stateType}
                );
                """.format(
                    temp = 'TEMPORARY' if self.temporaryTables else '',
                    **self.kwargs))
        self.inWith = True
        return self

    def __exit__(self, type, value, tb):
        self.inWith = False

    def runSQL(self, sql):
        if self.verbose:
            plpy.notice(sql)
        return plpy.execute(sql)

    def evaluate(self, expression):
        """
        Evaluate the given expression. The expression may depend on
        the current inter-iteration state and all arguments

        @param expression SQL expression. The
            following names are defined and can be used in the condition:
            - \c _args - The (single-row) argument table
            - \c _state - The row of the state table containing the latest
              inter-iteration state
        @return None if \c expression evaluates to NULL, otherwise the value of
            \c expression
        """

        resultObject = self.runSQL("""
            SELECT ({expression}) AS expression
            FROM {{rel_args}} AS _args
                LEFT OUTER JOIN (
                    SELECT *
                    FROM {{rel_state}} AS _state
                    WHERE _state._iteration = {{iteration}}
                ) AS _state ON True
            """.format(expression = expression).format(
                iteration = self.iteration,
                **self.kwargs))
        if resultObject.nrows() == 0:
            return None
        else:
            return resultObject[0]['expression']

    def test(self, condition):
        """
        Test if the given condition is satisfied. The condition may depend on
        the current inter-iteration state and all arguments

        @param condition Boolean SQL expression. The
            following names are defined and can be used in the condition:
            - \c _args - The (single-row) argument table
            - \c _state - The row of the state table containing the latest
              inter-iteration state
        @return None if \c condition evaluates to NULL, otherwise the Boolean
            value of \c condition
        """

        return self.evaluate("""
            CAST(({condition}) AS BOOLEAN)
            """.format(condition = condition))

    def update(self, newState, **updateKwargs):
        """
        Update the inter-iteration state

        @param newState SQL expression of type
            <tt>stateType.kwargs.stateType</tt>. The
            following names are defined and can be used in the condition:
            - \c _args - The (single-row) argument table
            - \c _state - The row of the state table containing the latest
              inter-iteration state
            .
            Note that <tt>{iteration}</tt> will still be the current iteration.
            For instance, it could be used in the expression as a WHERE
            condition: <tt>[...] WHERE _state._iteration = {iteration}</tt>
        @param updateKwargs Additional keyword arguments that will be available
            when \c newState is formatted

        This updates the current inter-iteration state to the result of
        evaluating \c newState. If <tt>self.truncAfterIteration</tt> is true,
        this will replace the old state, otherwise the history of all old states
        is kept.
        """

        updateKwargs.update(**self.kwargs)
        newState = newState.format(
            iteration = self.iteration,
            **updateKwargs)
        self.iteration = self.iteration + 1
        self.runSQL("""
            INSERT INTO {rel_state}
            SELECT
                {iteration},
                ({newState})
            """.format(
                iteration = self.iteration,
                newState = newState,
                **self.kwargs))
        if self.truncAfterIteration:
            self.runSQL("""
                DELETE FROM {rel_state} AS _state
                WHERE _state._iteration < {iteration}
                """.format(iteration = self.iteration, **self.kwargs))

def compute_kmeanspp_seeding(schema_madlib, rel_args, rel_state, rel_source,
    expr_point, **kwargs):
    """
    Driver function for k-Means++ seeding

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param expr_point Expression containing the point coordinates
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """
    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "DOUBLE PRECISION[][]",
        truncAfterIteration = True,
        schema_madlib = schema_madlib, # Identifiers start here
        rel_source = rel_source,
        expr_point = expr_point)
    with iterationCtrl as it:
        if it.test("_args.initial_centroids IS NULL"):
            it.update("""
                SELECT
                    ARRAY[{schema_madlib}.weighted_sample(_src.{expr_point}, 1)]
                FROM {rel_source} AS _src
                """)
        else:
            it.update("""
                SELECT _args.initial_centroids FROM {rel_args} AS _args
                """)
        while it.test("array_upper(_state._state, 1) < _args.k"):
            it.update("""
                SELECT
                    (
                        SELECT _state FROM {rel_state}
                        WHERE _iteration = {iteration}
                    ) || {schema_madlib}.weighted_sample(
                            _src.{expr_point},
                            ({schema_madlib}.closest_column(
                                (
                                    SELECT _state FROM {rel_state}
                                    WHERE _iteration = {iteration}
                                ),
                                _src.{expr_point},
                                (SELECT fn_dist FROM {rel_args})
                            )).distance
                        )
                FROM {rel_source} AS _src
                """)
    return iterationCtrl.iteration

def compute_kmeans_random_seeding(schema_madlib, rel_args, rel_state,
    rel_source, expr_point, **kwargs):
    """
    Driver function for k-Means random seeding

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param expr_point Expression containing the point coordinates
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """
    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "DOUBLE PRECISION[][]",
        truncAfterIteration = True,
        schema_madlib = schema_madlib, # Identifiers start here
        rel_source = rel_source,
        expr_point = expr_point)
    with iterationCtrl as it:
        it.update("""
            SELECT _args.initial_centroids FROM {rel_args} AS _args
            """)
        m = it.evaluate("_args.k - coalesce(array_upper(_state._state, 1), 0)")
        while m > 0:
            it.update("""
                SELECT
                    _state._state || {schema_madlib}.matrix_agg(_point)
                FROM (
                        SELECT
                            {expr_point} AS _point
                        FROM
                            {rel_source} AS _src
                        WHERE
                            random() < CAST(
                                ({m} + 14 + sqrt(196 + 28 * {m}))
                                / (SELECT count(*) FROM {rel_source})
                                AS DOUBLE PRECISION
                            )
                        ORDER BY random()
                        LIMIT {m}
                    ) AS _src,
                    {rel_state} AS _state
                WHERE
                    _state._iteration = {iteration}
                GROUP BY
                    _state._state
                """, m = m)
            m = it.evaluate("_args.k - coalesce(array_upper(_state._state, 1), 0)")
    return iterationCtrl.iteration

def compute_kmeans(schema_madlib, rel_args, rel_state, rel_source,
    expr_point, agg_centroid, **kwargs):
    """
    Driver function for Lloyd's k-means local-search heuristic

    @param schema_madlib Name of the MADlib schema, properly escaped/quoted
    @rel_args Name of the (temporary) table containing all non-template
        arguments
    @rel_state Name of the (temporary) table containing the inter-iteration
        states
    @param rel_source Name of the relation containing input points
    @param expr_point Expression containing the point coordinates
    @param kwargs We allow the caller to specify additional arguments (all of
        which will be ignored though). The purpose of this is to allow the
        caller to unpack a dictionary whose element set is a superset of
        the required arguments by this function.
    @return The iteration number (i.e., the key) with which to look up the
        result in \c rel_state
    """

    iterationCtrl = IterationController(
        rel_args = rel_args,
        rel_state = rel_state,
        stateType = "{schema_madlib}.kmeans_new_state",
        truncAfterIteration = False,
        schema_madlib = schema_madlib,
        rel_source = rel_source,
        expr_point = expr_point,
        agg_centroid = agg_centroid)
    with iterationCtrl as it:
        # Create the initial inter-iteration state of type kmeans_new_state
        it.update("""
            SELECT
                CAST((_args.initial_centroids, NULL, 'Inf', 1.0) AS
                    {schema_madlib}.kmeans_new_state)
            FROM {rel_args} AS _args
            """)
        while it.test("""
            {iteration} < _args.max_num_iterations AND
            (_state._state).frac_reassigned > _args.min_frac_reassigned
            """):
            it.update("""
                SELECT
                    CAST((
                        {schema_madlib}.matrix_agg(_centroid),
m4_ifdef(<!__GREENPLUM__!>,<!m4_ifdef(<!__HAS_ORDERED_AGGREGATES__!>,,<!
                        {schema_madlib}.
!>)!>)
                        array_agg(_new_centroid_id),
                        sum(_objective_fn),
                        CAST(sum(_num_reassigned) AS DOUBLE PRECISION)
                            / sum(_num_points)
                    ) AS {schema_madlib}.kmeans_new_state)
                FROM (
                    SELECT
                        (_new_centroid).column_id AS _new_centroid_id,
                        sum((_new_centroid).distance) AS _objective_fn,
                        count(*) AS _num_points,
                        sum(
                            CAST(
                                coalesce(
                                    (CAST((
                                        SELECT (_state).old_centroid_ids
                                        FROM {rel_state}
                                        WHERE _iteration = {iteration})
                                    AS INTEGER[]))[
                                        (_new_centroid).column_id + 1
                                    ] != _old_centroid_id,
                                    TRUE
                                )
                                AS INTEGER
                            )
                        ) AS _num_reassigned,
                        {agg_centroid}(_point) AS _centroid
                    FROM (
                        SELECT
                            -- PostgreSQL/Greenplum tuning:
                            -- VOLATILE function as optimization fence
                            {schema_madlib}.noop(),
                            _src.{expr_point} AS _point,
                            {schema_madlib}.closest_column(
                                (
                                    SELECT (_state).centroids FROM {rel_state}
                                    WHERE _iteration = {iteration}
                                ),
                                _src.{expr_point},
                                (SELECT fn_dist FROM {rel_args})
                            ) AS _new_centroid,
                            ({schema_madlib}.closest_column(
                                (
                                    SELECT (_state).centroids FROM {rel_state}
                                    WHERE _iteration = {iteration} - 1
                                ),
                                _src.{expr_point},
                                (SELECT fn_dist FROM {rel_args})
                            )).column_id AS _old_centroid_id
                        FROM {rel_source} AS _src
                    ) AS _points_with_assignments
                    GROUP BY (_new_centroid).column_id
                ) AS _new_centroids
                """)

            if it.test(
                "array_upper((_state._state).centroids, 1) < _args.k"):
                it.update("""
                    SELECT
                        CAST(((
                                SELECT (_state).centroids FROM {rel_state}
                                WHERE _iteration = {iteration}
                            ) || {schema_madlib}.kmeanspp_seeding(
                                '{rel_source}',
                                '{expr_point}',
                                (SELECT CAST(k AS INTEGER) FROM {rel_args}),
                                textin(regprocout(
                                    (SELECT fn_dist FROM {rel_args})
                                )),
                                (
                                    SELECT (_state).centroids FROM {rel_state}
                                    WHERE _iteration = {iteration}
                                )
                            ),
                            (
                                SELECT (_state).old_centroid_ids
                                FROM {rel_state}
                                WHERE _iteration = {iteration}
                            ),
                            'Inf',
                            1.0
                        ) AS {schema_madlib}.kmeans_new_state)
                    """)
    return iterationCtrl.iteration

m4_changequote(<!`!>,<!'!>)

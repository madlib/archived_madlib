/* ----------------------------------------------------------------------- *//** 
 *
 * @file cox_prop_hazards.sql_in
 *
 * @brief SQL functions for cox proportional hazards
 * @date July 2012
 *
 * @sa For a brief introduction to cox regression, see the
 *     module description \ref grp_cox_prop_hazards
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_cox_prop_hazards

@about
Proportional-Hazard models enable comparison of survival models. Survival models 
are functions describing the probability of an one-item event (prototypically, 
this event is death) with respect to time. The interval of time before death 
occurs is the survival time. Let T be a random vari- able representing the 
survival time, with a cumulative probability function P(t). Informally, P(t) is 
the probability that death has happened before time t.

Generally, applications start with a list of \f$ \boldsymbol n \f$ observations, 
each with \f$ \boldsymbol m \f$ covariates and a time of death. From this 
\f$ \boldsymbol n \times m \f$ matrix, we would like to derive the correlation 
between the covariates and the hazard function. This amounts to finding 
the parameters \f$ \boldsymbol \beta \f$ that best fit the model.

Let
- \f$ \boldsymbol t \in  \mathbf R^{m} \f$ denote the vector of observed dependent
  variables, with \f$ n \f$ rows.
- \f$ X \in \mathbf R^{m} \f$ denote the design matrix with \f$ m \f$
  columns and \f$ n \f$ rows, containing all observed vectors of independent
  variables \f$ \boldsymbol x_i \f$ as rows.
- \f$ R(t_i) \f$ denote the set of observations still alive at time \f$ t_i \f$

By definition,
\f[
    P[T_k = t_i | \boldsymbol R(t_i)]
    =    \frac{e^{\beta^T x_k} }{ \sum_{j \in R(t_i)} e^{\beta^T x_j}}.
    \,.
\f]

The partial likelihood function can now be generated as the product of 
conditional probabilities:
\f[
\mathcal L = \prod_{i = 1}^n 
				\left(
				\frac{e^{\beta^T x_i}}{ \sum_{j \in R(t_i)} e^{\beta^T x_j}}
				\right).
\f]

The log-likelihood form of this equation is
\f[
L = \sum_{i = 1}^n 
					\left[  \beta^T x_i
									- \log\left(\sum_{j \in R(t_i)} e^{\beta^T x_j }\right)
					\right].
\f]
An estimation of $\beta$ can be found by simply maximizing this log-likelihood.
This maximization is implemented using Newton's method.

@input

The training data is expected to be of the following form:\n
<pre>{TABLE|VIEW} <em>sourceName</em> (
    ...
    <em>dependentVariable</em> FLOAT8,
    <em>independentVariables</em> FLOAT8[],
    ...
)</pre>
Note: Dependent Variables refer to the time of death.

@usage
- Get vector of coefficients \f$ \boldsymbol \beta \f$ and all diagnostic
  statistics:\n
  <pre>SELECT * FROM \ref cox_prop_hazards(
    '<em>sourceName</em>', '<em>dependentVariable</em>', '<em>independentVariables</em>'
    [, <em>numberOfIterations</em> [, '<em>optimizer</em>' [, <em>precision</em> ] ] ]
);</pre>
  Output:
  <pre>coef | log_likelihood | num_iterations
                                               ...
</pre>
- Get vector of coefficients \f$ \boldsymbol \beta \f$:\n
  <pre>SELECT (\ref cox_prop_hazards('<em>sourceName</em>', '<em>dependentVariable</em>', '<em>independentVariables</em>')).coef;</pre>
- Get a subset of the output columns, e.g., only the array of coefficients
  \f$ \boldsymbol \beta \f$, the log-likelihood of determination:
  <pre>SELECT coef, log_likelihood
FROM \ref cox_prop_hazards('<em>sourceName</em>', '<em>dependentVariable</em>', '<em>independentVariables</em>');</pre>

@examp

-# Create the sample data set:
@verbatim 
sql> SELECT * FROM data;
      val   | time
---------------------------
 {0,1.95}   | 35
 {0,2.20}   | 28
 {1,1.45}   | 32
 {1,5.25}   | 31
 {1,0.38}   | 21
...
@endverbatim
-# Run the cox regression function:
@verbatim
sql> \x on
Expanded display is off.
sql> SELECT * FROM cox_prop_hazards('data', 'val', 'time', 100, 'newtom', 0.001);
-[ RECORD 1 ]--+--------------------------------------------------------------
coef           | {0.881089349817059,-0.0756817768938055}
log_likelihood | -4.46535157957394
num_iterations | 4

@endverbatim

@literature

A somewhat random selection of nice write-ups, with valuable pointers into
further literature:

[1] John Fox: Cox Proportional-Hazards Regression for Survival Data,
		Appendix to An R and S-PLUS companion to Applied Regression Feb 2012,
    http://cran.r-project.org/doc/contrib/Fox-Companion/appendix-cox-regression.pdf

[2] Stephen J Walters: What is a Cox model?
    http://www.medicine.ox.ac.uk/bandolier/painres/download/whatis/cox_model.pdf



@sa File cox_prop_hazards.sql_in (documenting the SQL functions)

@internal
@sa Namespace cox_prop_hazards 
    \ref madlib::modules::stats documenting the implementation in C++
@endinternal

*/

DROP TYPE IF EXISTS MADLIB_SCHEMA.cox_prop_hazards_result;
CREATE TYPE MADLIB_SCHEMA.cox_prop_hazards_result AS (
    coef DOUBLE PRECISION[],
    logLikelihood DOUBLE PRECISION,
    num_iterations INTEGER
);

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cox_prop_hazards_step_transition(
    DOUBLE PRECISION[],
    DOUBLE PRECISION[],
    DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE;



CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cox_prop_hazards_step_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;


/**
 * @internal
 * @brief Perform one iteration of the newton method
 */
CREATE
m4_ifdef(`__GREENPLUM__',`ORDERED')
AGGREGATE MADLIB_SCHEMA.cox_prop_hazards_step(

    /*+ x */ DOUBLE PRECISION[],
    /*+ previous_state */ DOUBLE PRECISION[]) (
    
    STYPE=DOUBLE PRECISION[],
    SFUNC=MADLIB_SCHEMA.cox_prop_hazards_step_transition,
    FINALFUNC=MADLIB_SCHEMA.cox_prop_hazards_step_final,
    INITCOND='{0,0,0,0,0,0}'
);


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_cox_prop_hazards_step_distance(
    /*+ state1 */ DOUBLE PRECISION[],
    /*+ state2 */ DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION AS
'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.internal_cox_prop_hazards_result(
    /*+ state */ DOUBLE PRECISION[])
RETURNS MADLIB_SCHEMA.cox_prop_hazards_result AS
'MODULE_PATHNAME'
LANGUAGE c IMMUTABLE STRICT;


-- We only need to document the last one (unfortunately, in Greenplum we have to
-- use function overloading instead of default arguments).
CREATE FUNCTION MADLIB_SCHEMA.compute_cox_prop_hazards(
    "source" VARCHAR,
    "indepColumn" VARCHAR,
    "depColumn" VARCHAR,
    "maxNumIterations" INTEGER,
    "optimizer" VARCHAR,
    "precision" DOUBLE PRECISION)
RETURNS INTEGER
AS $$PythonFunction(stats, cox_prop_hazards, compute_cox_prop_hazards)$$
LANGUAGE plpythonu VOLATILE;

/**
 * @brief Compute cox-regression coefficients and diagnostic statistics
 *
 * To include an intercept in the model, set one coordinate in the
 * <tt>independentVariables</tt> array to 1.
 * 
 * @param source Name of the source relation containing the training data
 * @param indepColumn Name of the independent column (data is automatically sorted by this column)
 * @param depColumn Name of the dependant column measuring time of death
 * @param maxNumIterations The maximum number of iterations
 * @param optimizer The optimizer to use (either
 *        <tt>'newton'</tt>/<tt>'newton'</tt> for the newton method
 * @param precision The difference between log-likelihood values in successive
 *        iterations that should indicate convergence. Note that a non-positive
 *        value here disables the convergence criterion, and execution will only
 *        stop after \c maxNumIterations iterations.
 *
 * @return TODO
 *
 * @usage
 *
 */
CREATE FUNCTION MADLIB_SCHEMA.cox_prop_hazards(
    "source" VARCHAR,
    "indepColumn" VARCHAR,
    "depColumn" VARCHAR,
    "maxNumIterations" INTEGER /*+ DEFAULT 20 */,
    "optimizer" VARCHAR /*+ DEFAULT 'newton' */,
    "precision" DOUBLE PRECISION /*+ DEFAULT 0.0001 */)
RETURNS MADLIB_SCHEMA.cox_prop_hazards_result AS $$
DECLARE
    theIteration INTEGER;
    fnName VARCHAR;
    theResult MADLIB_SCHEMA.cox_prop_hazards_result;
BEGIN
    theIteration := (
        SELECT MADLIB_SCHEMA.compute_cox_prop_hazards($1, $2, $3, $4, $5, $6)
    );
    IF optimizer = 'newton' THEN
        fnName := 'internal_cox_prop_hazards_result';
    ELSE
        RAISE EXCEPTION 'Unknown optimizer (''%'')', optimizer;
    END IF;
    EXECUTE
        $sql$
        SELECT (result).*
        FROM (
            SELECT
                MADLIB_SCHEMA.$sql$ || fnName || $sql$(_madlib_state) AS result
                FROM _madlib_iterative_alg
                WHERE _madlib_iteration = $sql$ || theIteration || $sql$
            ) subq
        $sql$
        INTO theResult;
				
    -- The number of iterations are not updated in the C++ code. We do it here.
    IF NOT (theResult IS NULL) THEN
        theResult.num_iterations = theIteration;
    END IF;
    RETURN theResult;
END;
$$ LANGUAGE plpgsql VOLATILE;


CREATE FUNCTION MADLIB_SCHEMA.cox_prop_hazards(
    "source" VARCHAR,
    "indepColumn" VARCHAR,
    "depColumn" VARCHAR)
RETURNS MADLIB_SCHEMA.cox_prop_hazards_result AS
$$SELECT MADLIB_SCHEMA.cox_prop_hazards($1, $2, $3, 20, 'newton', 0.0001);$$
LANGUAGE sql VOLATILE;

CREATE FUNCTION MADLIB_SCHEMA.cox_prop_hazards(
    "source" VARCHAR,
    "indepColumn" VARCHAR,
    "depColumn" VARCHAR,
    "maxNumIterations" INTEGER)
RETURNS MADLIB_SCHEMA.cox_prop_hazards_result AS
$$SELECT MADLIB_SCHEMA.cox_prop_hazards($1, $2, $3, $4, 'newton', 0.0001);$$
LANGUAGE sql VOLATILE;

CREATE FUNCTION MADLIB_SCHEMA.cox_prop_hazards(
    "source" VARCHAR,
    "indepColumn" VARCHAR,
    "depColumn" VARCHAR,
    "maxNumIterations" INTEGER,
    "optimizer" VARCHAR)
RETURNS MADLIB_SCHEMA.cox_prop_hazards_result AS
$$SELECT MADLIB_SCHEMA.cox_prop_hazards($1, $2, $3, $4, $5, 0.0001);$$
LANGUAGE sql VOLATILE;

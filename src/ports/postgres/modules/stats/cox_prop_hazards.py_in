# coding=utf-8

"""
@file cox_prop_hazards.py_in

@brief Cox prop Hazards: Driver functions

@namespace coxprophazards

Cox prop Hazards: Driver functions

//"""

import plpy

def __runIterativeAlg(stateType, intermediateStateType, initialState, source,
				depColumn, updateExpr, intermediateExpr, terminateExpr, resultExpr,
				maxNumIterations, cyclesPerIteration = 1):
    """
    Driver for an iterative algorithm
    
    A general driver function for most iterative algorithms: The state between
    iterations is kept in a variable of type <tt>stateType</tt>, which is
    initialized with <tt><em>initialState</em></tt>. During each iteration, the
    SQL statement <tt>updateSQL</tt> is executed in the database. Afterwards,
    the SQL query <tt>updateSQL</tt> decides whether the algorithm terminates.
    
    @param stateType SQL type of the state between iterations
    @param initialState The initial value of the SQL state variable
    @param source The source relation
    @param updateExpr SQL expression that returns the new state of type
        <tt>stateType</tt>. The expression may use the replacement fields
        <tt>"{state}"</tt>, <tt>"{iteration}"</tt>, and
        <tt>"{sourceAlias}"</tt>. Source alias is an alias for the source
        relation <tt><em>source</em></tt>.
    @param terminateExpr SQL expression that returns whether the algorithm should
        terminate. The expression may use the replacement fields
        <tt>"{oldState}"</tt>, <tt>"{newState}"</tt>, and
        <tt>"{iteration}"</tt>. It must return a BOOLEAN value.
    @param maxNumIterations Maximum number of iterations. Algorithm will then
        terminate even when <tt>terminateExpr</tt> does not evaluate to \c true
    @param cyclesPerIteration Number of aggregate function calls per iteration.
    """
    updateSQL = """
				INSERT INTO _cox_intermediate_state (_cox_dependant_variable,_cox_iState)
				SELECT 
					({depColumn})::FLOAT8,
					{intermediateExpr}
				FROM
					(
						SELECT
							{resultExpr} as result
						FROM
							_madlib_iterative_alg as st
						WHERE 
							_madlib_iteration = {{iteration}} - 1
					) as result,
					{{source}} as src;

				INSERT INTO _madlib_iterative_alg
        SELECT
            {{iteration}},
            {updateExpr}
        FROM
            _madlib_iterative_alg AS st,
            _cox_intermediate_state AS src
        WHERE
            st._madlib_iteration = {{iteration}}-1
				;
				DELETE FROM _cox_intermediate_state;
        """.format(updateExpr = updateExpr,
                intermediateExpr = intermediateExpr,
                resultExpr = resultExpr,
								depColumn=depColumn)
    terminateSQL = """
        SELECT
            {terminateExpr} AS should_terminate
        FROM    
        (
            SELECT _madlib_state
            FROM _madlib_iterative_alg
            WHERE _madlib_iteration = {{iteration}} - {{cyclesPerIteration}}
        ) AS older,
        (
            SELECT _madlib_state
            FROM _madlib_iterative_alg
            WHERE _madlib_iteration = {{iteration}}
        ) AS newer
        """.format(terminateExpr = terminateExpr)
    checkForNullStateSQL = """
        SELECT _madlib_state IS NULL AS should_terminate
        FROM _madlib_iterative_alg
        WHERE _madlib_iteration = {iteration}
        """

    oldMsgLevel = plpy.execute("SELECT setting FROM pg_settings WHERE name='client_min_messages'"
        )[0]['setting']
    plpy.execute("""
        SET client_min_messages = error;
        DROP TABLE IF EXISTS _madlib_iterative_alg;
        CREATE TEMPORARY TABLE _madlib_iterative_alg (
            _madlib_iteration INTEGER PRIMARY KEY,
            _madlib_state {stateType}
        );
				DROP TABLE IF EXISTS _cox_intermediate_state;
				CREATE TEMPORARY TABLE _cox_intermediate_state (
			    _cox_dependant_variable FLOAT8,
			    _cox_iState {intermediateStateType}
				) m4_ifdef( `__GREENPLUM__', `DISTRIBUTED BY (_cox_dependant_variable)' );
        SET client_min_messages = {oldMsgLevel};
        """.format(stateType = stateType,
				       intermediateStateType = intermediateStateType,
				       oldMsgLevel = oldMsgLevel))
    
    iteration = 0
    plpy.execute("""
        INSERT INTO _madlib_iterative_alg VALUES ({iteration}, {initialState})
        """.format(iteration = iteration, initialState = initialState))
    while True:
        iteration = iteration + 1
        plpy.execute(updateSQL.format(
            source = source,
						depColumn = depColumn,
            state = "(st._madlib_state)",
            intermediateState = "(_cox_iState)",
						intermediateStateDepColumn = "_cox_dependant_variable",
						oldCoef = "(result).coef",
            iteration = iteration,
            sourceAlias = "src"))
        if plpy.execute(checkForNullStateSQL.format(
                iteration = iteration))[0]['should_terminate'] or (
            iteration > cyclesPerIteration and (
            iteration >= cyclesPerIteration * maxNumIterations or
            plpy.execute(terminateSQL.format(
                iteration = iteration,
                cyclesPerIteration = cyclesPerIteration,
                oldState = "(older._madlib_state)",
                newState = "(newer._madlib_state)"))[0]['should_terminate'])):
            break
    
    # Note: We do not drop the temporary table
    return iteration


def compute_cox_prop_hazards(MADlibSchema, source, indepColumn,
		depColumn, optimizer, maxNumIterations, precision, **kwargs):
    """
    Compute cox survival regression coefficients
    
    This method serves as an interface to different optimization algorithms.
    By default, iteratively reweighted least squares is used, but for data with
    a lot of columns the conjugate-gradient method might perform better.
    
    @param MADlibSchema Name of the MADlib schema, properly escaped/quoted
    @param source Name of relation containing the training data
    @param indepColumn Name of independent column in training data
    @param depColumn Name of dependant column which captures time of death
    @param optimizer Name of the optimizer. 'newton': newton method
    @param maxNumIterations Maximum number of iterations
    @param precision Terminate if two consecutive iterations have a difference 
           in the log-likelihood of less than <tt>precision</tt>. In other
           words, we terminate if the objective function value has converged.
           This convergence criterion can be disabled by specifying a negative
           value.
    @param kwargs We allow the caller to specify additional arguments (all of
           which will be ignored though). The purpose of this is to allow the
           caller to unpack a dictionary whose element set is a superset of 
           the required arguments by this function.
    
    @return array with coefficients in case of convergence, otherwise None
    """
    
    if maxNumIterations < 1:
        plpy.error("Number of iterations must be positive")
    
    if optimizer not in ['newton']:
        plpy.error("Unknown optimizer requested. Must be 'newton'")
						
    return __runIterativeAlg(
        stateType = "FLOAT8[]",
        intermediateStateType = "{MADlibSchema}.intermediate_cox_prop_hazards_result".format(MADlibSchema = MADlibSchema),
        initialState = "NULL" ,
        source = source,
        depColumn = depColumn,
        updateExpr = """
            {MADlibSchema}.cox_prop_hazards_step(
                ({{intermediateState}}).x,
								{{intermediateStateDepColumn}},
                ({{intermediateState}}).exp_coef_x,
                ({{intermediateState}}).x_exp_coef_x,
                ({{intermediateState}}).x_xTrans_exp_coef_x,
                {{state}}
								ORDER BY {{intermediateStateDepColumn}} DESC
            )
            """.format(
                MADlibSchema = MADlibSchema,
                depColumn = depColumn),
        intermediateExpr = """
            {MADlibSchema}.intermediate_cox_prop_hazards(
                ({indepColumn})::FLOAT8[],
                {{oldCoef}}::FLOAT8[]
            )
            """.format(
                MADlibSchema = MADlibSchema,
                indepColumn = indepColumn),

        terminateExpr = """
            {MADlibSchema}.internal_cox_prop_hazards_step_distance(
                {{newState}}, {{oldState}}
            ) < {precision}
            """.format(
                MADlibSchema = MADlibSchema,
                precision = precision),
				resultExpr = """
						{MADlibSchema}.internal_cox_prop_hazards_result({{state}})
						""".format(MADlibSchema = MADlibSchema),
        maxNumIterations = maxNumIterations)


def robust_cox_prop_hazards(MADlibSchema, source, indepColumn,
		depColumn, coef, **kwargs):
		
    result = plpy.execute("""
		SELECT (compute_robust_cox_prop_hazards(
			(_cox_intermediate_state).x,
			_cox_dep_column,
			(_cox_intermediate_state).exp_coef_x,
			(_cox_intermediate_state).x_exp_coef_x,
			(_cox_intermediate_state).x_xTrans_exp_coef_x,
			NULL
		)).* FROM
		(
			SELECT {depColumn} as _cox_dep_column,
					 intermediate_cox_prop_hazards({indepColumn}, {coef}) 
									as _cox_intermediate_state
			FROM {source}
		) subq;""".format(
									MADlibSchema = MADlibSchema,
									source = source,
									indepColumn = indepColumn,
									depColumn = depColumn,
									coef = coef)
		)
    return result[0]['std_err'], result[0]['z_stats'],result[0]['p_values']

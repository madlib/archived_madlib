/* ----------------------------------------------------------------------- *//** 
 *
 * @file prob.sql_in
 *
 * @brief SQL functions for evaluating probability functions
 *
 * @sa For an overview of probability functions, see the module
 *     description \ref grp_prob.
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_prob

@about

Probability distribution functions.
*/

/**
 * @brief Chi-squared cumulative distribution function.
 *
 * @param x Chi-squared distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a chi-squared distributed random
 *     variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_cdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Chi-squared distribution probability Density function.
 *
 * @param x Chi-squared distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return the relative frequency of \f$ x \f$ where \f$ T \f$ is a chi-squared distributed random
 *     variable with \f$ \nu \f$ as the degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_pdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Chi-squared distribution Quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return \f$ r \f$ where \f$ chi_squared_cdf(r, \nu) \f$ equas \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_quantile(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F cumulative distribution function.
 *
 * @param x Fisher F distributed random variable
 * @param d_1 Degree of freedom in numerator
 * @param d_2 Degree of freedom in denominator
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Fisher F distributed random
 *     variable with parameters \f$ d_1 \f$ and \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_cdf(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F probability density function.
 *
 * @param x Fisher F distributed random variable
 * @param d_1 Degree of freedom in numerator
 * @param d_2 Degree of freedom in denominator
 * @return the relative frequency of \f$ x \f$ is a Fisher F distributed random
 *     variable with parameters \f$ d_1 \f$ and \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_pdf(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F quantile function.
 *
 * @param x Fisher F distributed random variable
 * @param d_1 Degree of freedom in numerator
 * @param d_2 Degree of freedom in denominator
 * @return \f$ r \f$ where \f$ fisher_f_cdf(r, d_1, d_2) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_quantile(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Kolmogorov cumulative distribution function.
 *
 * @param x Kolmogorov distributed random variable
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Kolmogorov distributed random
 *     variable
 *
 * @sa Kolmogorov-Smirnov test: ks_test()
 */
CREATE FUNCTION MADLIB_SCHEMA.kolmogorov_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal cumulative distribution function.
 *
 * @param x normal distributed random variable
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma \geq 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ T \f$ is a normally distributed random
 *     variable with mean \f$ \mu \f$ and variance \f$ \sigma^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal probability density function
 *
 * @param x normal distributed random variable
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma \geq 0 \f$
 * @return the relative frequency of \f$ x \f$ where \f$ T \f$ is a normally distributed random
 *     variable with mean \f$ \mu \f$ and variance \f$ \sigma^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION 
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal Quantile function
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma \geq 0 \f$
 * @return \f$ r \f$ where \f$ normal_cdf(r, \mu, \sigma) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION 
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t cumulative distribution function.
 *
 * @param x student-t distributed random variable
 * @param nu Degree of freedom \f$ \nu >= 1 \f$.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a student-t distributed
 *     random variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.student_t_cdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t probability density function.
 *
 * @param x student-t distributed random variable
 * @param nu Degree of freedom \f$ \nu >= 1 \f$.
 * @return relative frequency of \f$ x \f$ where \f$ x \f$ is a student-t distributed
 *     random variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.student_t_pdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param nu Degree of freedom \f$ \nu >= 1 \f$.
 * @return \f$ r \f$ where \f$ student_t_cdf(r, \nu) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.student_t_quantile(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta cumulative distribution function.
 *
 * @param x Beta distributed random variable
 * @param alpha Degree of freedom in numerator
 * @param beta Degree of freedom in denominator
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Beta distributed random
 *     variable with shape parameters \f$ \alpha \f$ and \f$ \beta \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_cdf(
    x DOUBLE PRECISION,
    "alpha" DOUBLE PRECISION,
    "beta" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta probability density function.
 *
 * @param x Beta distributed random variable
 * @param alpha Degree of freedom in numerator
 * @param beta Degree of freedom in denominator
 * @return the relative frequency of \f$ x \f$ is a Beta distributed random
 *     variable with shape parameters \f$ \alpha \f$ and \f$ \beta \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_pdf(
    x DOUBLE PRECISION,
    "alpha" DOUBLE PRECISION,
    "beta" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta quantile function.
 *
 * @param x Beta distributed random variable
 * @param alpha Degree of freedom in numerator
 * @param beta Degree of freedom in denominator
 * @return \f$ r \f$ where \f$ beta_cdf(r, \alpha, \beta) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_quantile(
    x DOUBLE PRECISION,
    "alpha" DOUBLE PRECISION,
    "beta" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/* ----------------------------------------------------------------------- *//** 
 *
 * @file prob.sql_in
 *
 * @brief SQL functions for evaluating probability functions
 *
 * @sa For an overview of probability functions, see the module
 *     description \ref grp_prob.
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_prob

@about

Probability distribution functions.
*/

/**
 * @brief Chi-squared cumulative distribution function.
 *
 * @param x
 * @param nu Degree of freedom \f$ \nu >= 1 \f$.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a chi-squared distributed random
 *     variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_cdf(
    x DOUBLE PRECISION,
    nu INTEGER
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F cumulative distribution function.
 *
 * @param x
 * @param d_1 Degree of freedom in numerator
 * @param d_2 Degree of freedom in denominator
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Fisher F distributed random
 *     variable with parameters \f$ d_1 \f$ and \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_cdf(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Kolmogorov cumulative distribution function.
 *
 * @param x
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a Kolmogorov distributed random
 *     variable
 *
 * @sa Kolmogorov-Smirnov test: ks_test()
 */
CREATE FUNCTION MADLIB_SCHEMA.kolmogorov_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal cumulative distribution function.
 *
 * @param x
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma \geq 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ T \f$ is a normally distributed random
 *     variable with mean \f$ \mu \f$ and variance \f$ \sigma^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t cumulative distribution function.
 *
 * @param x
 * @param nu Degree of freedom \f$ \nu >= 1 \f$.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a student-t distributed
 *     random variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.student_t_cdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

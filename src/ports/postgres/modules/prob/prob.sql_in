/* ----------------------------------------------------------------------- *//** 
 *
 * @file prob.sql_in
 *
 * @brief SQL functions for evaluating probability functions
 *
 * @sa For an overview of probability functions, see the module
 *     description \ref grp_prob.
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_prob

@about

Probability distribution functions.
*/

/**
 * @brief Chi-squared cumulative distribution function.
 *
 * @param x Chi-squared distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a chi-squared distributed random
 *     variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_cdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Chi-squared distribution probability density function.
 *
 * @param x Chi-squared distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return the relative frequency of \f$ x \f$ where \f$ x \f$ is a chi-squared distributed random
 *     variable with \f$ \nu \f$ as the degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_pdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Chi-squared distribution Quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return \f$ r \f$ where \f$ chi_squared_cdf(r, \nu) \f$ equas \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_quantile(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F cumulative distribution function.
 *
 * @param x Fisher F distributed random variable
 * @param d_1 Degree of freedom in numerator \f$ d_1 > 0 \f$
 * @param d_2 Degree of freedom in denominator \f$ d_2 > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a fisher F distributed random
 *     variable with parameters \f$ d_1 \f$ and \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_cdf(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F probability density function.
 *
 * @param x Fisher F distributed random variable
 * @param d_1 Degree of freedom in numerator \f$ d_1 > 0 \f$
 * @param d_2 Degree of freedom in denominator \f$ d_2 > 0 \f$
 * @return the relative frequency of \f$ x \f$ where \f$ x \f$ is a fisher F distributed random
 *     variable with parameters \f$ d_1 \f$ and \f$ d_2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_pdf(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Fisher F quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param d_1 Degree of freedom in numerator \f$ d_1 > 0 \f$
 * @param d_2 Degree of freedom in denominator \f$ d_2 > 0 \f$
 * @return \f$ r \f$ where \f$ fisher_f_cdf(r, d_1, d_2) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.fisher_f_quantile(
    x DOUBLE PRECISION,
    "d_1" DOUBLE PRECISION,
    "d_2" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Kolmogorov cumulative distribution function.
 *
 * @param x Kolmogorov distributed random variable
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a kolmogorov distributed random
 *     variable
 *
 * @sa Kolmogorov-Smirnov test: ks_test()
 */
CREATE FUNCTION MADLIB_SCHEMA.kolmogorov_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal cumulative distribution function.
 *
 * @param x normal distributed random variable
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ T \f$ is a normally distributed random
 *     variable with mean \f$ \mu \f$ and variance \f$ \sigma^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_cdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal probability density function
 *
 * @param x normal distributed random variable
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma > 0 \f$
 * @return the relative frequency of \f$ x \f$ where \f$ x \f$ is a normally distributed random
 *     variable with mean \f$ \mu \f$ and variance \f$ \sigma^2 \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION 
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_pdf(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Normal Quantile function
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param mu Mean \f$ \mu \f$
 * @param sigma Standard deviation \f$ \sigma > 0 \f$
 * @return \f$ r \f$ where \f$ normal_cdf(r, \mu, \sigma) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION /*+ DEFAULT 0 */,
    sigma DOUBLE PRECISION  /*+ DEFAULT 1 */
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION,
    mu DOUBLE PRECISION 
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

CREATE FUNCTION MADLIB_SCHEMA.normal_quantile(
    x DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t cumulative distribution function.
 *
 * @param x student-t distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a student-t distributed
 *     random variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_cdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t probability density function.
 *
 * @param x student-t distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return relative frequency of \f$ x \f$ where \f$ x \f$ is a student-t distributed
 *     random variable with \f$ nu \f$ degrees of freedom
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_pdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Student-t quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @return \f$ r \f$ where \f$ students_t_cdf(r, \nu) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_quantile(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta cumulative distribution function.
 *
 * @param x Beta distributed random variable
 * @param alpha Shape \f$ \alpha > 0 \f$
 * @param beta Shape \f$ \beta > 0 \f$ 
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a beta distributed random
 *     variable with shape parameters \f$ \alpha \f$ and \f$ \beta \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_cdf(
    x DOUBLE PRECISION,
    "alpha" DOUBLE PRECISION,
    "beta" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta probability density function.
 *
 * @param x Beta distributed random variable
 * @param alpha Shape \f$ \alpha > 0 \f$
 * @param beta Shape \f$ \beta > 0 \f$ 
 * @return the relative frequency of \f$ x \f$ is a beta distributed random
 *     variable with shape parameters \f$ \alpha \f$ and \f$ \beta \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_pdf(
    x DOUBLE PRECISION,
    "alpha" DOUBLE PRECISION,
    "beta" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Beta quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param alpha Shape \f$ \alpha > 0 \f$
 * @param beta Shape \f$ \beta > 0 \f$ 
 * @return \f$ r \f$ where \f$ beta_cdf(r, \alpha, \beta) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_quantile(
    x DOUBLE PRECISION,
    "alpha" DOUBLE PRECISION,
    "beta" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Uniform cumulative distribution function.
 *
 * @param x Uniform distributed random variable
 * @param min The minimum value
 * @param max The maximum value \f$ max > min \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a uniform distributed random
 *     variable with range \f$ [min, max] \f$ 
 */
CREATE FUNCTION MADLIB_SCHEMA.uniform_cdf(
    x DOUBLE PRECISION,
    "min" DOUBLE PRECISION,
    "max" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Uniform probability density function.
 *
 * @param x Uniform distributed random variable
 * @param min The minimum value
 * @param max The maximum value \f$ max > min \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a uniform distributed random
 *     variable with range \f$ [min, max] \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.uniform_pdf(
    x DOUBLE PRECISION,
    "min" DOUBLE PRECISION,
    "max" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Uniform quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param min The minimum value
 * @param max The maximum value \f$ max > min \f$
 * @return \f$ r \f$ where \f$ uniform_cdf(r, min, max) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.uniform_quantile(
    x DOUBLE PRECISION,
    "min" DOUBLE PRECISION,
    "max" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Weibull cumulative distribution function.
 *
 * @param x Weibull distributed random variable
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a weibull distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.weibull_cdf(
    x DOUBLE PRECISION,
    "shape" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Weibull probability density function.
 *
 * @param x Weibull distributed random variable
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a weibull distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.weibull_pdf(
    x DOUBLE PRECISION,
    "shape" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Weibull quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ r \f$ where \f$ weibull_cdf(r, shape, scale) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.weibull_quantile(
    x DOUBLE PRECISION,
    "shape" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Triangular cumulative distribution function.
 *
 * @param x Triangular distributed random variable
 * @param lower The lower limit, which conforms \f$ lower \in (-\inf, +\inf) \f$.
 * @param mode  The mode, which conforms \f$ lower \le mode \le upper \f$. 
 * @param upper The upper limit, which conforms \f$ upper > lower \f$. 
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a triangular distributed random
 *     variable with parameters \f$ lower \f$, \f$ upper \f$ and \f$ mode \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.triangular_cdf(
    x DOUBLE PRECISION,
    "lower" DOUBLE PRECISION,
    "mode" DOUBLE PRECISION,
    "upper" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Triangular probability density function.
 *
 * @param x Triangular distributed random variable
 * @param lower The lower limit, which conforms \f$ lower \in (-\inf, +\inf) \f$.
 * @param mode  The mode, which conforms \f$ lower \le mode \le upper \f$. 
 * @param upper The upper limit, which conforms \f$ upper > lower \f$. 
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a triangular distributed random
 *     variable with parameters \f$ lower \f$, \f$ upper \f$ and \f$ mode \f$ 
 */
CREATE FUNCTION MADLIB_SCHEMA.triangular_pdf(
    x DOUBLE PRECISION,
    "lower" DOUBLE PRECISION,
    "mode" DOUBLE PRECISION,
    "upper" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Triangular quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param lower The lower limit, which conforms \f$ lower \in (-\inf, +\inf) \f$.
 * @param mode  The mode, which conforms \f$ lower \le mode \le upper \f$. 
 * @param upper The upper limit, which conforms \f$ upper > lower \f$. 
 * @return \f$ r \f$ where \f$ triangular_cdf(r, lower, upper, mode) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.triangular_quantile(
    x DOUBLE PRECISION,
    "lower" DOUBLE PRECISION,
    "mode" DOUBLE PRECISION,
    "upper" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Rayleigh cumulative distribution function.
 *
 * @param x Rayleigh distributed random variable
 * @param sigma The shape \f$ \sigma > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a rayleigh distributed random
 *     variable with shape \f$ \sigma \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.rayleigh_cdf(
    x DOUBLE PRECISION,
    "sigma" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Rayleigh probability density function.
 *
 * @param x Rayleigh distributed random variable
 * @param sigma The shape \f$ \sigma > 0 \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a rayleigh distributed random
 *     variable with shape \f$ \sigma \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.rayleigh_pdf(
    x DOUBLE PRECISION,
    "sigma" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Rayleigh quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param sigma The shape \f$ \sigma > 0 \f$
 * @return \f$ r \f$ where \f$ rayleigh_cdf(r, sigma) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.rayleigh_quantile(
    x DOUBLE PRECISION,
    "sigma" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/**
 * @brief Pareto cumulative distribution function.
 *
 * @param x Pareto distributed random variable
 * @param location The location value \f$ location > 0 \f$
 * @param shape The shape value \f$ shape > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a pareto distributed random
 *     variable with parameters \f$ location \f$ and \f$ shape \f$.
 */
CREATE FUNCTION MADLIB_SCHEMA.pareto_cdf(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "shape" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Pareto probability density function.
 *
 * @param x Pareto distributed random variable
 * @param location The location value \f$ location > 0 \f$
 * @param shape The shape value \f$ shape > 0 \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a pareto distributed random
 *     variable with parameters \f$ location \f$ and \f$ shape \f$.
 */
CREATE FUNCTION MADLIB_SCHEMA.pareto_pdf(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "shape" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Pareto quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param location The location value \f$ location > 0 \f$
 * @param shape The shape value \f$ shape > 0 \f$
 * @return \f$ r \f$ where \f$ pareto_cdf(r, location, shape) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.pareto_quantile(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "shape" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Noncentral Student-t cumulative distribution function.
 *
 * @param x Noncentral student-t distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @param mu Noncentral parameter.
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a noncentral student-t distributed
 *     random variable with \f$ \nu \f$ as the degrees of freedom and \f$ \mu \f$ as 
 *	   the noncentral parameter.
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_t_cdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION,
	mu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Noncentral Student-t probability density function.
 *
 * @param x Noncentral student-t distributed random variable
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @param mu Noncentral parameter.
 * @return relative frequency of \f$ x \f$ where \f$ x \f$ is a noncentral student-t distributed
 *     random variable with \f$ \nu \f$ as the degrees of freedom and \f$ \mu \f$ as 
 *	   the noncentral parameter.
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_t_pdf(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION,
	mu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Noncentral Student-t quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param nu Degree of freedom \f$ \nu > 0 \f$.
 * @param mu Noncentral parameter.
 * @return \f$ r \f$ where \f$ non_central_t_cdf(r, \nu, \mu) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.non_central_t_quantile(
    x DOUBLE PRECISION,
    nu DOUBLE PRECISION,
	mu DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;



/**
 * @brief Laplace cumulative distribution function.
 *
 * @param x Laplace distributed random variable
 * @param location The location value 
 * @param scale The scale value \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a laplace distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$.
 */
CREATE FUNCTION MADLIB_SCHEMA.laplace_cdf(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Laplace probability density function.
 *
 * @param x Laplace distributed random variable
 * @param location The location value
 * @param scale The scale value \f$ scale > 0 \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a laplace distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$.
 */
CREATE FUNCTION MADLIB_SCHEMA.laplace_pdf(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Laplace quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param location The location value
 * @param scale The scale value \f$ scale > 0 \f$
 * @return \f$ r \f$ where \f$ laplace_cdf(r, location, scale) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.laplace_quantile(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Gamma cumulative distribution function.
 *
 * @param x Gamma distributed random variable
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a gamma distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_cdf(
    x DOUBLE PRECISION,
    "shape" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Gamma probability density function.
 *
 * @param x Gamma distributed random variable
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a gamma distributed random
 *     variable with parameters \f$ scale \f$ and \f$ shape \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_pdf(
    x DOUBLE PRECISION,
    "shape" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Gamma quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param shape Shape \f$ shape > 0 \f$
 * @param scale Scale \f$ scale > 0 \f$
 * @return \f$ r \f$ where \f$ gamma_cdf(r, shape, scale) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_quantile(
    x DOUBLE PRECISION,
    "shape" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Bernoulli cumulative distribution function.
 *
 * @param x Bernoulli distributed random variable \f$ x \in {0, 1} \f$
 * @param succ_prob Success probability \f$ succ_prob \in [0,1] \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a bernoulli distributed random
 *     variable with success probability \f$ succ_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.bernoulli_cdf(
    x DOUBLE PRECISION,
    "succ_prob" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Bernoulli probability density function.
 *
 * @param x Bernoulli distributed random variable \f$ x \in {0, 1} \f$
 * @param succ_prob Success probability \f$ succ_prob \in [0,1] \f$
 * @return the relative frenquency of \f$ x \f$ where \f$ x \f$ is a bernoulli distributed random
 *     variable with success probability \f$ succ_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.bernoulli_pdf(
    x DOUBLE PRECISION,
    "succ_prob" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Bernoulli quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param succ_prob Success probability \f$ succ_prob \in [0,1] \f$
 * @return \f$ r \f$ where \f$ bernoulli_cdf(r, succ_prob) \f$ equals \f$ x \f$
 *
 */
CREATE FUNCTION MADLIB_SCHEMA.bernoulli_quantile(
    x DOUBLE PRECISION,
    "succ_prob" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Binomial cumulative distribution function.
 *
 * @param x Binomial distributed random variable
 * @param trials The number of trials \f$ trials >= 0 and trials \in N \f$
 * @param succ_prob Success probability \f$ succ_prob \in [0,1] \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a binomial distributed random
 *     variable with parameters \f$ trials \f$ and \f$ succ_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.binomial_cdf(
    x DOUBLE PRECISION,
    "trials" DOUBLE PRECISION,
    "succ_prob" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Binomial probability density function.
 *
 * @param x Binomial distributed random variable
 * @param trials The number of trials \f$ trials >= 0 and trials \in N \f$
 * @param succ_prob Success probability \f$ succ_prob \in [0,1] \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a binomial distributed random
 *     variable with parameters \f$ trials \f$ and \f$ succ_prob \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.binomial_pdf(
    x DOUBLE PRECISION,
    "trials" DOUBLE PRECISION,
    "succ_prob" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Binomial quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param trials The number of trials \f$ trials >= 0 and trials \in N \f$
 * @param succ_prob Success probability \f$ succ_prob \in [0,1] \f$
 * @return \f$ r \f$ where \f$ binomial_cdf(r, trials, succ_prob) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.binomial_quantile(
    x DOUBLE PRECISION,
    "trials" DOUBLE PRECISION,
    "succ_prob" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Cauchy cumulative distribution function.
 *
 * @param x Cauchy distributed random variable
 * @param location The location value 
 * @param scale The scale value \f$ scale > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a cauchy distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$.
 */
CREATE FUNCTION MADLIB_SCHEMA.cauchy_cdf(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Cauchy probability density function.
 *
 * @param x Cauchy distributed random variable
 * @param location The location value
 * @param scale The scale value \f$ scale > 0 \f$
 * @return the relative frequency of \f$ x \f$  where \f$ x \f$ is a cauchy distributed random
 *     variable with parameters \f$ location \f$ and \f$ scale \f$.
 */
CREATE FUNCTION MADLIB_SCHEMA.cauchy_pdf(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Cauchy quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param location The location value
 * @param scale The scale value \f$ scale > 0 \f$
 * @return \f$ r \f$ where \f$ cauchy_cdf(r, location, scale) \f$ equals \f$ x \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.cauchy_quantile(
    x DOUBLE PRECISION,
    "location" DOUBLE PRECISION,
    "scale" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Exponential cumulative distribution function.
 *
 * @param x Exponential distributed random variable \f$ x \ge 0 \f$
 * @param rate Success probability \f$ rate > 0 \f$
 * @return \f$ \Pr[X \leq x] \f$ where \f$ X \f$ is a exponential distributed random
 *     variable with average rate as \f$ rate \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.exponential_cdf(
    x DOUBLE PRECISION,
    "rate" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Exponential probability density function.
 *
 * @param x Exponential distributed random variable \f$ x \ge 0 \f$
 * @param rate Success probability \f$ rate > 0 \f$
 * @return the relative frenquency of \f$ x \f$ where \f$ x \f$ is a exponential distributed random
 *     variable with average rate as \f$ rate \f$
 */
CREATE FUNCTION MADLIB_SCHEMA.exponential_pdf(
    x DOUBLE PRECISION,
    "rate" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

/**
 * @brief Exponential quantile function.
 *
 * @param x \f$ CDF \in [0,1] \f$
 * @param rate Success probability \f$ rate > 0 \f$
 * @return \f$ r \f$ where \f$ exponential_cdf(r, rate) \f$ equals \f$ x \f$
 *
 */
CREATE FUNCTION MADLIB_SCHEMA.exponential_quantile(
    x DOUBLE PRECISION,
    "rate" DOUBLE PRECISION
) RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;

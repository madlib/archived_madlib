/* -----------------------------------------------------------------------------
 * Test probability functions.
 * -------------------------------------------------------------------------- */

SELECT assert(
    student_t_cdf(NULL, 1) IS NULL AND
    student_t_cdf(1, NULL) IS NULL,
    'Student-t CDF: Wrong handling of NULLs.'
);

SELECT assert(
    isnan( student_t_cdf('NaN', 1) ) AND
    isnan( student_t_cdf(1, 'NaN') ),
    'Student-t CDF: Wrong handling of NULLs.'
);

SELECT assert(
    relative_error(student_t_cdf(0, 1000001), 0.5) < 0.0001 AND
    abs(student_t_cdf(1, 1000001) + student_t_cdf(-1, 1000001) - 1.0) < 0.001 AND
    
    relative_error(student_t_cdf(0, 201), 0.5) < 0.0001 AND
    abs(student_t_cdf(1, 201) + student_t_cdf(-1, 201) - 1.0) < 0.001 AND
    
    relative_error(student_t_cdf(0, 5), 0.5) < 0.0001 AND
    abs(student_t_cdf(1, 5) + student_t_cdf(-1, 5) - 1.0) < 0.001 AND
    
    relative_error(student_t_cdf(0, 4.5), 0.5) < 0.0001 AND
    abs(student_t_cdf(1, 4.5) + student_t_cdf(-1, 4.5) - 1.0) < 0.001,
    
    'Student-t CDF: Distribution is not symmetric.'
);

SELECT assert(
    relative_error(student_t_cdf(1, 1), 1.0/2 + 1.0/pi() * atan(1)) < 0.0001 AND
    relative_error(student_t_cdf(-1, 1), 1.0/2 + 1.0/pi() * atan(-1)) < 0.0001 AND
    relative_error(student_t_cdf(2, 1), 1.0/2 + 1.0/pi() * atan(2)) < 0.0001 AND
    relative_error(student_t_cdf(-2, 1), 1.0/2 + 1.0/pi() * atan(-2)) < 0.0001 AND
    relative_error(student_t_cdf(4, 1), 1.0/2 + 1.0/pi() * atan(4)) < 0.0001 AND
    relative_error(student_t_cdf(-4, 1), 1.0/2 + 1.0/pi() * atan(-4)) < 0.0001 AND
    
    relative_error(student_t_cdf(1, 2), 1.0/2 * (1. + 1/sqrt(2 + 1^2))) < 0.0001 AND
    relative_error(student_t_cdf(-1, 2), 1.0/2 * (1. - 1/sqrt(2 + 1^2))) < 0.0001 AND
    relative_error(student_t_cdf(2, 2), 1.0/2 * (1. + 2/sqrt(2 + 2^2))) < 0.0001 AND
    relative_error(student_t_cdf(-2, 2), 1.0/2 * (1. - 2/sqrt(2 + 2^2))) < 0.0001 AND
    relative_error(student_t_cdf(4, 2), 1.0/2 * (1. + 4/sqrt(2 + 4^2))) < 0.0001 AND
    relative_error(student_t_cdf(-4, 2), 1.0/2 * (1. - 4/sqrt(2 + 4^2))) < 0.0001,
    
    'Student-t CDF: Wrong values for special case nu in {1,2}.'
);

SELECT assert(
        check_if_raises_error($$SELECT student_t_cdf(1, 0)$$) AND
    NOT check_if_raises_error($$SELECT student_t_cdf(1, 1)$$),
    'Student-t CDF: Non-positive degree of freedom (nu) does not raise error.'
);



CREATE OR REPLACE FUNCTION _test_normal_pdf(t float8, mu float8, sigma float8) RETURNS float8 AS $$
BEGIN
    return exp(-1*(t - mu)^2/(2*(sigma^2)))/sqrt(2*pi()*sigma^2);
END;
$$LANGUAGE 'plpgsql' STRICT IMMUTABLE;

select assert(
    normal_cdf(NULL, 0, 1) IS NULL AND
    normal_cdf(0, NULL, 1) IS NULL AND
    normal_cdf(0, 0, NULL) IS NULL,
    'Normal CDF: Wrong handling of NULLs.' 
);

select assert(
    isnan(normal_cdf('NaN', 0, 1)) AND
    isnan(normal_cdf(0, 'NaN', 1)) AND
    isnan(normal_cdf(0, 0, 'NaN')),
    'Normal CDF: Wrong handling of NULLs.' 
);

select assert(
    abs(normal_pdf(0.5, 0, 1) - _test_normal_pdf(0.5, 0, 1)) < 1e-6 AND
    abs(normal_pdf(-0.5, 0, 1) - _test_normal_pdf(-0.5, 0, 1)) < 1e-6 AND
    abs(normal_pdf(0, 0, 1) - _test_normal_pdf(0, 0, 1)) < 1e-6 AND
    abs(normal_pdf('Infinity', 0, 1) - 0) < 1e-6 AND
    abs(normal_pdf('-Infinity', 0, 1) - 0) < 1e-6,
    'Normal CDF: Wrong values with mu = 0, signma = 1.'
);

select assert(
    abs(normal_pdf(0.5, -1, 2) - _test_normal_pdf(0.5, -1, 2)) < 1e-6 AND
    abs(normal_pdf(-0.5, -1, 2) - _test_normal_pdf(-0.5, -1, 2)) < 1e-6 AND
    abs(normal_pdf(0, -1, 2) - _test_normal_pdf(0, -1, 2)) < 1e-6 AND
    abs(normal_pdf('Infinity', -1, 2) - 0) < 1e-6 AND
    abs(normal_pdf('-Infinity', -1, 2) - 0) < 1e-6,
    'Normal CDF: Wrong values with mu = -1, signma = 2.'
);

select assert(
    check_if_raises_error($$SELECT normal_pdf(0.5, -2, -1)$$),
    'Normal CDF: Non-positive sigma does not raise error.'
);

DROP FUNCTION _test_normal_pdf(t float8, mu float8, sigma float8);

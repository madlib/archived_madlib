/* ----------------------------------------------------------------------- *//**
 *
 * @file train_data_loader.sql_in
 *
 * @brief create all the necessary tables to store the training data, then use the linear chain conditional 
 *        random field to train the data
 * @param datapath the path to the crf training data
 * @date May 2012
 * @sa For an introduction to the text feature extraction, see the module
 *     description \ref grp_crf
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.traindata_textfex(datapath text) RETURNS void AS
$$     
        query = "DROP TABLE IF EXISTS MADLIB_SCHEMA.textfex_feature;" + \
                "CREATE TABLE MADLIB_SCHEMA.textfex_feature (id integer,name text,prev_label_id integer,label_id integer,weight float)";
        plpy.execute(query);

        plpy.execute("CREATE TABLE temp_feature(start_pos integer, doc_id integer, name text, prev_label_id integer, label_id integer);)
        plpy.execute("CREATE TABLE featuretbl(start_pos integer, doc_id integer, name text, prev_label_id integer, label_id integer, findex integer);)
        plpy.execute("CREATE TABLE temp_feature_index(name text, prev_label_id integer, label_id integer);)
 
        # insert into dictionary table
        plpy.execute("""INSERT INTO textfex_dictionary(text,token_id,label,count,total)
                        SELECT DISTINCT seg_text
                        FROM   """ + textfex_segmentbl
                        GROUP BY seg_tex, label""";""")
 
        # create a temporary table to store all the features
        
        # extract all the edge features
        plpy.execute("""INSERT INTO temp_feature(start_pos, doc_id, fname,pre_label_id,label_id) 
                        SELECT seg1.start_pos, seg1.doc_id, 'E.', seg1.label, seg2.label 
                        FROM   textfex_segmenttbl seg1, textfex_segment seg2
                        WHERE  seg1.doc_id = seg2.doc_id AND seg1.start_pos+1 = seg2.start_pos;""")   
         
        #extract all the regex features
        plpy.execute("""INSERT INTO temp_feature(start_pos, doc_id, fname,pre_label_id,label_id) 
                        SELECT start_pos, doc_id, 'R_' || name, -1, label
                        FROM   textfex_regex, textfex_segmenttbl
                        WHERE  seg_text ~ pattern;""")        
           
        #extract all the start feature
        plpy.execute("""INSERT INTO temp_feature(start_pos, doc_id, fname,pre_label_id,label_id) 
                        SELECT start_pos, doc_id, 'S.', -1, label
                        FROM   textfex_segmenttbl
                        WHERE  start_pos = 0;""")
        
        #extract all the end featue
        plpy.execute("""INSERT INTO temp_feature(start_pos, doc_id, fname,pre_label_id,label_id) 
                        SELECT start_pos, doc_id, 'End.', -1, label
                        FROM   textfex_segmenttbl
                        WHERE  start_pos = max_p;""");

        #word feature
        plpy.execute("""INSERT INTO temp_feature(start_pos, doc_id, fname,pre_label_id,label_id) 
                        SELECT start_pos, doc_id, 'W_' || seg_text, -1, label
                        FROM   textfex_segmentt;""");
        
        #unknown feature
        plpy.execute("""INSERT INTO temp_feature(start_pos, doc_id, fname,pre_label_id,label_id) 
                        SELECT start_pos,doc_id, 'U', -1, label
                        FROM   textfex_segmenttbl seg, textfex_dictionary
                        WHERE  textfex_segmenttbl.seg_text = textfex_dictionary.seg_text AND textfex_dictionary.total;""");
 
        #get all distcint features
        plpy.execute("""INSERT INTO temp_feature_index(fname,pre_label_id,label_id) 
                        SELECT DISTINCT ON fname, prev_label_id, label_id
                        FROM   temp_featu;""");

        plpy.execute("""CREATE SEQUENCE featureIndex START 1 INCREMENT 1;
                        INSERT INTO featuretbl(start_pos, doc_id, fname,pre_label_id,label_id,findex)
                        SELECT start_pos, doc_id, temp_feature.fname, temp_feature.prev_label_id, temp_feature.label_id, findex
                        FROM   temp_feature, temp_feature_index
                        WHERE  temp_feature.fname=temp_feature_index.fname AND
                               temp_feature.pre_label_id=temp_feature_index.pre_label_id AND
	                       temp_feature.label_id=temp_feature_index.label_;""");
         
        
$$ LANGUAGE plpythonu STRICT;         

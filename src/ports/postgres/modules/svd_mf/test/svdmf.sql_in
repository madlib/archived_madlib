---------------------------------------------------------------------------
-- Rules: 
-- ------
-- 1) Any DB objects should be created w/o schema prefix,
--    since this file is executed in a separate schema context.
-- 2) There should be no DROP statements in this script, since
--    all objects created in the default schema will be cleaned-up outside.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Setup: 
---------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- Generate_sparse:
--	Creates a table represetint sparse matrix which is the result or products of two 
--	sequential valued rows.
--	Used for testing general convergence on data that has a discoverable structure
--
--  $1 - number of rows in the matrix
--	$2 - number of columns in the matrix
--	$3 - number of empty cells pre single cell containing a value
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION Generate_Sparse(INT, INT, INT) RETURNS void AS $$
declare
	i INT;
begin
-- DROP TABLE IF EXISTS test;
CREATE TABLE test(
	row_num INT, 
	col_num INT,
	val FLOAT
);

FOR i IN 1..$1 LOOP
	EXECUTE 'INSERT INTO test SELECT '||i||', gen.a, CAST((gen.a*'||i||') AS FLOAT) FROM (SELECT CAST((random()*'||$2||'+1) AS INT) AS a FROM generate_series(1,'||$2/$3||')) as gen';
END LOOP;
end
$$ LANGUAGE plpgsql;


--------------------------------------------------------------------------------
-- Generate_random:
--	Creates a table represetint sparse matrix with random values.
--	Used for testing general convergence poroperties on random data,
--	where convergence rate should be minimal
--
--      $1 - number of rows in the matrix
--	$2 - number of columns in the matrix
--	$3 - number of empty cells pre single cell containing a value
--------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION Generate_Random(INT, INT, INT) RETURNS void AS $$
declare
	i INT;
begin
-- DROP TABLE IF EXISTS test;
CREATE TABLE test(
	row_num INT, 
	col_num INT,
	val FLOAT
);

FOR i IN 1..$1 LOOP
	EXECUTE 'INSERT INTO test SELECT '||i||', gen.a, random() FROM (SELECT CAST((random()*'||$2||'+1) AS INT) AS a FROM generate_series(1,'||$2/$3||')) as gen';
END LOOP;
end
$$ LANGUAGE plpgsql;

---------------------------------------------------------------
-- Test
---------------------------------------------------------------
-- Pick a test to run: Random or Sequential Sparse; and creat a test table
-- SELECT Generate_Random(10000, 10000, 100);
SELECT Generate_Sparse(10, 10, 5);

-- Run SVD decomposition on 3 main features
SELECT MADLIB_SCHEMA.svdmf_run('test'::text, 'col_num'::text, 'row_num'::text, 'val'::text, 3);

-- Display portion of the results
SELECT * FROM MADLIB_SCHEMA.matrix_u ORDER BY col_num, row_num LIMIT 10;

/* ----------------------------------------------------------------------- *//** 
 *
 * @file prob.sql_in
 *
 * @brief SQL probability distribution functions
 * @date November 2011
 *
 * @sa For an overview of probability distribution functions, see the module
 *     description \ref grp_prob.
 *
 *//* ----------------------------------------------------------------------- */

/**
@addtogroup grp_prob

@about 

These functions provide probability distribution functions for several important 
distributions including:
- Beta Distribution
- Chi Squared Distribution
- Gamma Distribution
- Student's t Distribution

For each supported distribution we provide three functions:
- xxx_cdf() - cumulative distribution function
- xxx_pdf() - probability density function
- xxx_quantile() - quantile function

@implementation
Implementation of these functions is based on the Boost C++ library.

@usage
<pre>SELECT beta_cdf(<em>x</em>, <em>alpha</em>, <em>beta</em>);</pre>
<pre>SELECT beta_pdf(<em>x</em>, <em>alpha</em>, <em>beta</em>);</pre>
<pre>SELECT beta_quantile(<em>probability</em>, <em>alpha</em>, <em>beta</em>);</pre>
<pre>SELECT chi_squared_cdf(<em>x</em>, <em>degree_of_freedom</em>);</pre>
<pre>SELECT chi_squared_pdf(<em>x</em>, <em>degree_of_freedom</em>);</pre>
<pre>SELECT chi_squared_quantile(<em>probability</em>, <em>degree_of_freedom</em>);</pre>
<pre>SELECT gamma_cdf(<em>x</em>, <em>shape</em>, <em>scale</em>);</pre>
<pre>SELECT gamma_pdf(<em>x</em>, <em>shape</em>, <em>scale</em>);</pre>
<pre>SELECT gamma_quantile(<em>probability</em>, <em>shape</em>, <em>scale</em>);</pre>
<pre>SELECT students_t_cdf(<em>x</em>, <em>degree_of_freedom</em>);</pre>
<pre>SELECT students_t_pdf(<em>x</em>, <em>degree_of_freedom</em>);</pre>
<pre>SELECT students_t_quantile(<em>probability</em>, <em>degree_of_freedom</em>);</pre>

@sa File prob.sql_in documenting the SQL functions.\n\n 
*/

/**
 * @brief Beta cumulative distribution function.
 *
 * @param x     Quantile, range [0,1].
 * @param alpha Shape parameter, > 0.
 * @param beta  Shape parameter, > 0.
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_cdf(x DOUBLE PRECISION, alpha DOUBLE PRECISION, beta DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Beta probability density function
 *
 * @param x     Quantile, range [0,1].
 * @param alpha Shape parameter, > 0.
 * @param beta  Shape parameter, > 0.
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_pdf(x DOUBLE PRECISION, alpha DOUBLE PRECISION, beta DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Beta quantile function
 *
 * @param p     Proability, range [0,1].
 * @param alpha Shape parameter, > 0.
 * @param beta  Shape parameter, > 0.
 */
CREATE FUNCTION MADLIB_SCHEMA.beta_quantile(p DOUBLE PRECISION, alpha DOUBLE PRECISION, beta DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Chi Squared cumulative distribution function.
 *
 * @param x  Random variate, >= 0.
 * @param df Degree of freedom >= 1.
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_cdf(x DOUBLE PRECISION, df DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Chi Squared probability density function
 *
 * @param x  Random variate, >= 0.
 * @param df Degree of freedom >= 1.
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_pdf(x DOUBLE PRECISION, df DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Chi Squared quantile function
 *
 * @param p  Probability, range [0,1]. 
 * @param df Degree of freedom >= 1.
 */
CREATE FUNCTION MADLIB_SCHEMA.chi_squared_quantile(p DOUBLE PRECISION, df DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Gamma cumulative distribution function.
 *
 * @param x      Random variate, >= 0.
 * @param shape  Shape parameter, > 0. 
 * @param scale  Scale parameter, > 0.
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_cdf(x DOUBLE PRECISION, shape DOUBLE PRECISION, scale DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Gamma probability density function
 *
 * @param x      Random variate, >= 0.
 * @param shape  Shape parameter, > 0.
 * @param scale  Scale parameter, > 0.
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_pdf(x DOUBLE PRECISION, shape DOUBLE PRECISION, scale DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Gamma quantile function
 *
 * @param p      Probability, range [0,1].
 * @param shape  Shape parameter, > 0.
 * @param scale  Scale parameter, > 0.
 */
CREATE FUNCTION MADLIB_SCHEMA.gamma_quantile(p DOUBLE PRECISION, shape DOUBLE PRECISION, scale DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;


/**
 * @brief Student's-t cumulative distribution function.
 *
 * @param x  Random variate
 * @param df Degree of freedom (>0, can be non-integer).
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_cdf(x DOUBLE PRECISION, df DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Student's-t probability density function
 *
 * @param x  Random variate.
 * @param df Degree of freedom (> 0, can be non-integer).
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_pdf(x DOUBLE PRECISION, df DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;

/**
 * @brief Student's-t quantile function
 *
 * @param p  Probability, range [0,1].
 * @param df Degree of freedom >= 1.
 */
CREATE FUNCTION MADLIB_SCHEMA.students_t_quantile(p DOUBLE PRECISION, df DOUBLE PRECISION)
RETURNS DOUBLE PRECISION
AS 'MODULE_PATHNAME' LANGUAGE C IMMUTABLE STRICT;


/* ----------------------------------------------------------------------- *//**
 *
 * @file viterbi.sql_in
 * @brief implementation of vi
 * @date   February 2012
 *
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_textfex
@about create a human readable view of the segmentation output table
 \code select * from enron.extraction;
 \endcode
*/

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__vcrf_top1_view (segtbl text, labeltbl text, result_tbl text, vw text) returns text AS
$$
rv = plpy.execute('SELECT COUNT(*) AS total FROM ' + labeltbl);
nlabel = rv[0]['total']
query = """create view """ + vw + """ AS
           select segs.doc_id, start_pos, seg_text, L.label, (L.id+1) as id, (exp((result.label[max_pos+2] - result.label[max_pos+3])::float/1000)) as prob
           from """ + segtbl + """ segs, """ + labeltbl + """ L, """ + result_tbl + """ result
           where result.label[segs.start_pos+1]=L.id and segs.doc_id=result.doc_id
           order by doc_id, start_pos;"""
plpy.execute(query)
return vw
$$ language plpythonu strict;

/**
 * @brief This function implements the viterbi algorithm which takes the sentence to be label as input and return the top1 labeling for that sentence 
 * @param mArray m factors
 * @param rArray r factors
 * @param nlabel total number of labels in the label space
 * @returns the top1 label sequence, the last two elements in the array is used to calculate the top1 probablity 
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.__vcrf_top1_label(mArray int[], rArray int[], nlabel int)
returns int[] as 'MODULE_PATHNAME' language c strict;


/**
 * @brief This function prepares the inputs for the c function '__vcrf_top1_label' and invoke the c function. 
 * @param factor_mtbl m factors
 * @param factor_rtbl r factors
 * @param labeltbl total number of labels in the label space
 * @param resulttbl table to store the output
 * @param schemaname the schema name of the output tables
 * @returns the top1 label sequence, the last two elements in the array is used to calculate the top1 probablity 
 */
/** examp
  * select __vcrf_label(doc_id) from doc_ids where doc_id=1;
  *-------------------------------------------------------------
  * UDF: __vcrf_label(segtbl, docid int)
  *usage: compute top1 labelings for a document
  *input: doc_id
  *output: output file name
  */

CREATE OR REPLACE FUNCTION
MADLIB_SCHEMA.__vcrf_label(segtbl text, factor_mtbl text, factor_rtbl text, labeltbl text, resulttbl text, schemaname text)   RETURNS text AS
  $$
  m_factors = schemaname + "._m_factors"
  r_factors = schemaname + "._r_factors"
  resulttbl_raw = resulttbl + "_raw"

  plpy.execute("DROP TABLE IF EXISTS " + m_factors +","+ r_factors + "," + resulttbl_raw +";")

  retval = {}
  retval["m_factors"] = m_factors
  retval["r_factors"] = r_factors
  retval["result_table"] = resulttbl

  query = """
  -- for each sentence, store array representation of r_factors
  select doc_id, array_agg(score order by start_pos, label) as score
  into """ + r_factors + """
  from (select doc_id, start_pos, label, score
        from """ + factor_rtbl + """ factors,
             """ + segtbl + """ seg
        where factors.seg_text=seg.seg_text) as ss
  group by doc_id
  order by doc_id;"""
  plpy.execute(query)
  plpy.execute("analyze " + r_factors + ";")

  query = """
  -- array representation of m_factor
  select score
  into """ + m_factors + """
  from (select score
        from """ + factor_mtbl + """ factors) as ss; """
  plpy.execute(query)

  query = "CREATE TABLE " + resulttbl_raw + " (doc_id integer, label integer[]);"
  plpy.execute(query);

  rv = plpy.execute('SELECT COUNT(*) AS total FROM ' + labeltbl);
  nlabel = rv[0]['total']

  query = (""" INSERT INTO """ + resulttbl_raw + """
               SELECT doc_id, MADLIB_SCHEMA.__vcrf_top1_label(mfactors.score, rfactors.score, """ + str(nlabel) + """ )
               FROM """ + m_factors + """ mfactors, """ + r_factors + """ rfactors;""")

  plpy.execute(query);

  query = "SELECT * FROM MADLIB_SCHEMA.__vcrf_top1_view(\'" + segtbl + "\', \'" + labeltbl + "\', \'" + resulttbl_raw + "\', \'" + resulttbl + "\');"
  plpy.execute(query);
   
$$ LANGUAGE plpythonu STRICT;

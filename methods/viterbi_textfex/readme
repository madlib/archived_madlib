Method implemented: textfex_viterbi
Description:
Instead of extracting features on fly like many packages did such as CRF PACKAGE,
we precomputed the features and  we use a factor table to store the  materialized factors for each token.
For a new testing sentence, if the tokens in the sentence are already presented in the database, we don't 
have to recomputed their features, we only need to compute the features for tokens which are not present 
in the database. We can easily imagine that the benefits that our materialization can bring when we are 
labing a large corpus.

File included:
<madlib_root>/methods/viterbi_textfex/src/pg_gp/textfex.sql_in
Description: the code in this file is for feature extration. There are two functions
             implemented in this file. textfex_mrtbl(), without arguments, is to extract
             the features for the whole training dataset. The other function is textfex_mrtbl(doc_id).
             This function is for extracting features for a single sentence specified by the doc_id.
<madlib_root>/methods/viterbi_textfex/src/pg_gp/topk_array.c
Description: the code in this file is for array mulitpulation. 
             the function implemented in this file are invoked by viterbi.sql_in.
<madlib_root>/methods/viterbi_textfex/src/pg_gp/viterbi.sql_in
Description: the code in this file is for labeling the tokens using viterbi algorithm.
<madlib_root>/methods/viterbi_textfex/src/pg_gp/test/textfex_viterbi.sql_in
Description: unit test code

Features implemented in our package:
EdgeFeatures:    These are transition features, solely dependent upon current label and previous 'y' values.
                 The feature encodes transition information and allows sequential information to be included in the model.
StartFeatures:   These features fire when the current label in consideration is a start state.
                 This feature checks whether the current label can be a start state or not, and fires accordingly.
EndFeatures:     These features fire when the current label in consideration is a end state.
                 This feature checks whether the current label can be a end state or not, and fires accordingly.
WordFeatures:    These features simply check whether the current token is present in the dictionary in the particular state 
                 under consideration or not. The dictionary is created on-the-fly from the training set.
UnknownFeatures: These features fire when the current token is not observed at the time of training.
RegexFeatures:   There features fire when the current token can be captured by the regular expressions.
LexiconFeature:

How to use our textfex_viterbi:
Use CRF PACKAGE to generate the models. Basically CRF PACKAGE generates two model files feature and crf.
Wrte some simple scripts to convert the data in the model files to the data format required by our package. 
The data format can be found at the test file textfex_viterbi.sql_in. The test file also describes how we can 
use the pakcage.

Reference:
CRF PACKAGE: http://crf.sourceforge.net/introduction/features.html.
ViterbiCRF:  http://www.cs.berkeley.edu/~daisyw/ViterbiCRF.html

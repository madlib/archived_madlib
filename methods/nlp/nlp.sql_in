/* ----------------------------------------------------------------------- *//** 
 *
 * @file nlp.sql_in
 *
 * @brief SQL functions for logistic regression
 * @date January 2011
 *
 * @sa For a brief introduction to logistic regression, see the
 *     module description \ref grp_nlp.
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

/**
@addtogroup grp_nlp
@about
@input
@usage
@examp
@literature
@sa File nlp.sql_in (documenting the SQL functions)
@sa Namespace logistic (documenting the driver/outer loop implemented in

*/

DROP TYPE IF EXISTS MADLIB_SCHEMA.nlp_result;
CREATE TYPE MADLIB_SCHEMA.nlp_result AS (
    log_likelihood DOUBLE PRECISION,
    lambda DOUBLE PRECISION[],
    num_iterations INTEGER
);

/*CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.crf_gradient_step_transition(
    DOUBLE PRECISION[],
    BOOLEAN,
    DOUBLE PRECISION[],
    DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.crf_gradient_step_merge_states(
    state1 DOUBLE PRECISION[],
    state2 DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.crf_gradient_step_final(
    state DOUBLE PRECISION[])
RETURNS DOUBLE PRECISION[]
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;*/

/**
 * @brief Compute logistic-regression coefficients and diagnostic statistics
 *
 */
CREATE FUNCTION MADLIB_SCHEMA.nlp(
    "source" VARCHAR,
    "depColumn" VARCHAR,
    "indepColumn" VARCHAR,
    "maxNumIterations" INTEGER /*+ DEFAULT 20 */,
    "precision" DOUBLE PRECISION /*+ DEFAULT 0.0001 */)
RETURNS MADLIB_SCHEMA.nlp_result AS $$
DECLARE
    theIteration INTEGER;
    theResult MADLIB_SCHEMA.nlp_result;
BEGIN
    theIteration := (
        SELECT MADLIB_SCHEMA.compute_nlp($1, $2, $3, $4, $5, $6)
    );
    --EXECUTE
        --$sql$
        --SELECT (result).*
        --FROM (
            --SELECT
                --MADLIB_SCHEMA.$sql$ || fnName || $sql$(_madlib_state) AS result
                --FROM _madlib_iterative_alg
                --WHERE _madlib_iteration = $sql$ || theIteration || $sql$
            --) subq
        --$sql$
        --INTO theResult;
    -- The number of iterations are not updated in the C++ code. We do it here.
    IF NOT (theResult IS NULL) THEN
        theResult.num_iterations = theIteration;
    END IF;
    RETURN theResult;
END;
$$ LANGUAGE plpgsql VOLATILE;

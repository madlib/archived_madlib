---------------------------------------------------------------------------
-- Rules: 
-- ------
-- 1) Any DB objects should be created w/o schema prefix,
--    since this file is executed in a separate schema context.
-- 2) There should be no DROP statements in this script, since
--    all objects created in the default schema will be cleaned-up outside.
---------------------------------------------------------------------------

---------------------------------------------------------------------------
-- Setup: 
---------------------------------------------------------------------------
CREATE TYPE dectree_elem AS(
	feature MADLIB_SCHEMA.svec,
	class INTEGER
);

CREATE OR REPLACE FUNCTION dectree_CreateTreePoint(pre_class INTEGER) 
RETURNS dectree_elem AS $$
declare
	result dectree_elem;
	feature FLOAT[];
	class INTEGER;
	i INTEGER;
begin
	class = (pre_class+4)%5+1;
	
	feature = ARRAY[1,1,1,1,1,1,1,1,1,1];
	IF(class = 1) THEN
		feature[1] = 1;
		feature[3] = 1;
		feature[5] = 1;
        feature[7] = 2.0;
	ELSIF(class = 2) THEN
		feature[1] = 1;
		IF(pre_class < 2500) THEN
			feature[3] = 1;
			feature[5] = 2;
            feature[7] = 5.0;
		ELSE
			feature[3] = 2;
			feature[5] = 1;
            feature[7] = 11.5;
		END IF;
	ELSIF(class = 3) THEN
		IF(pre_class < 2500) THEN
			feature[1] = 1;
			feature[3] = 2;
			feature[5] = 2;
            feature[7] = 11.5;
		ELSE
			feature[1] = 2;
			feature[3] = 1;
			feature[5] = 1;
            feature[7] = 13.5;
		END IF;
	ELSIF(class = 4) THEN
		feature[1] = 2;
		IF(pre_class < 2500) THEN
			feature[3] = 2;
			feature[5] = 1;
            feature[7] = 16.5;
		ELSE
			feature[3] = 1;
			feature[5] = 2;
            feature[7] = 19.5;
		END IF;
	ELSIF(class = 5) THEN
		feature[1] = 2;
		feature[3] = 2;
		feature[5] = 2;
        feature[7] = 29.5;
	END IF;
	
	result.feature = MADLIB_SCHEMA.svec_cast_float8arr(feature);
	result.class = class;
	RETURN result;
end
$$ language plpgsql;

CREATE OR REPLACE FUNCTION dectree_install_test() RETURNS TEXT AS $$
declare
	result TEXT;
    cont_features INT[];
    index  INT;
    score INT;
begin 

	CREATE TEMP TABLE Points(
		id_col INTEGER,
		feature_col MADLIB_SCHEMA.svec,
		class_col INTEGER
	);

	CREATE TEMP TABLE Speedup(
		id INTEGER
	);
	
    cont_features = ARRAY[ 7 ];
    
	INSERT INTO Speedup SELECT G.a FROM generate_series(1, 5000) AS G(a);
	
	INSERT INTO Points (id_col, feature_col, class_col) SELECT id, (g.t).* 
	    FROM (SELECT id, dectree_CreateTreePoint(id) AS t FROM Speedup) As g;

	PERFORM MADLIB_SCHEMA.c45_train('infogain','Points','MADLIB_SCHEMA.trained_tree'
        ,'Points','t','7','feature_col','id_col','class_col', 
        100,'ignore','t',3000,10,0.001,0.01,1);

	PERFORM MADLIB_SCHEMA.c45_classify('MADLIB_SCHEMA.trained_tree',
        'Points','MADLIB_SCHEMA.classified_points','t');

	SELECT INTO result CASE WHEN(sum((id+4)%5+1-class)=0) THEN 'PASS' ELSE 'FAIL' END 
	    FROM MADLIB_SCHEMA.classified_points;
	
	IF result = 'FAIL' THEN
	   RAISE EXCEPTION 'Install check failed.';
	END IF;
	
    score = MADLIB_SCHEMA.c45_score('MADLIB_SCHEMA.trained_tree',
        'Points','t');

    IF (score <> 1) THEN
	   RAISE EXCEPTION 'Install check failed.';
	END IF;
    
	RETURN result;
end
$$ language plpgsql;	

---------------------------------------------------------------------------
-- Test
---------------------------------------------------------------------------
SELECT dectree_install_test();
